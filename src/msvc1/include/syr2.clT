/* ************************************************************************
 * Copyright 2013 Advanced Micro Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ************************************************************************/

/************************************************/
//NOTE: THIS FILE IS NOT USED. SEE SYR2_HER2.CLT
//      THIS FILE IS FOR LEGACY PURPOSES.

//Column Major Lower
static const char *syr2_CL_kernel = "\
\n\
#ifdef DOUBLE_PRECISION\n\
    #ifdef cl_khr_fp64\n\
    #pragma OPENCL EXTENSION cl_khr_fp64 : enable\n\
    #else\n\
    #pragma OPENCL EXTENSION cl_amd_fp64 : enable\n\
    #endif\n\
#endif\n\
\n\
#define TARGET_ROWS_BY_VEC     (%TARGET_ROWS / %V)\n\
#define TARGET_WIDTH        (%BLOCKSIZE / TARGET_ROWS_BY_VEC )\n\
#define TARGET_HEIGHT        (%BLOCKSIZE / TARGET_ROWS_BY_VEC )\n\
// Column-Major Lower\n\
// nBlocks     = (N - 1)/ TR + 1\n\
// totalBlocks     = (nBlocks * ( nBlocks + 1)) / 2\n\
__kernel void %PREFIXsyr2_CL_kernel( __global const %TYPE* _A, __global const %TYPE* _X, __global const %TYPE* _Y, int N, int offx, int incx, int offy, int incy, int offa, int lda, %TYPE alpha)\n\
{\n\
\n\
    __global const %TYPE* X;\n\
    __global const %TYPE* Y;\n\
    __global %TYPE* A;\n\
\n\
    __local %TYPE xShared[%TARGET_ROWS];\n\
    __local %TYPE yShared[%TARGET_ROWS];\n\
    __local %TYPE xSharedConj[%TARGET_ROWS];\n\
    __local %TYPE ySharedConj[%TARGET_ROWS];\n\
\n\
    int nBlocks = ((N - 1) / %TARGET_ROWS) + 1;\n\
\n\
    A = _A + offa;\n\
\n\
    if ( incx < 0 ) // Goto end of vector\n\
    {\n\
        X     = _X + offx - ( N - 1) * incx;\n\
    }\n\
    else\n\
    {\n\
        X = _X + offx;\n\
    }\n\
\n\
    if ( incy < 0 ) // Goto end of vector\n\
    {\n\
        Y     = _Y + offy - ( N - 1) * incy;\n\
    }\n\
    else\n\
    {\n\
        Y = _Y + offy;\n\
    }\n\
\n\
"
"\
    int blockID  = get_group_id(0);\n\
    int threadID = get_local_id(0);\n\
\n\
    __local int iShared;\n\
    __local int jShared;\n\
\n\
    // Get (i,j) of Block\n\
    if ( threadID == 0)\n\
    {\n\
        int _i = 0, _j = 0;\n\
        for ( _j = (blockID / nBlocks); _j < nBlocks; _j++)\n\
        {\n\
            _i = blockID - ((_j*((2* nBlocks) + 1 - _j))/2) + _j;\n\
            if ( _i < nBlocks && ( _i >= 0) )\n\
            {\n\
                break;\n\
            }\n\
        }\n\
\n\
        iShared = _i;\n\
        jShared = _j;\n\
    }\n\
\n\
    barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
    int i = iShared;\n\
    int j = jShared;\n\
\n\
\n\
    int ref_x = i * %TARGET_ROWS;\n\
    int ref_y = j * %TARGET_ROWS;\n\
\n\
    // Load data into xShared and yShared\n\
    // Not a common task among blocks in the present implementation..\n\
    // Diagonal Blocks : Should handle not reading diagonal element complex value\n\
    // Diagonal blocks : Should handle the last block as well\n\
    // Scalar code in Present implementation\n\
    if ( i == j)\n\
    {\n\
        int ncols = ((ref_y + %TARGET_ROWS) < N) ? %TARGET_ROWS : (N-ref_y);\n\
        int nrows = ((ref_x + %TARGET_ROWS) < N) ? %TARGET_ROWS : (N-ref_x);\n\
        int nElements = ((nrows) * ((ncols) + 1)) >> 1;\n\
        nrows -= 1;\n\
        ncols -= 1;\n\
        for(i = threadID; i < nElements; i += get_local_size(0))\n\
        {\n\
            int r = -1, c = -1;\n\
            for(int k = 1; (k <= %TARGET_ROWS); k ++)\n\
            {\n\
                int temp = ((k - 1) * k) >> 1;\n\
"
"\
                r = ((i >= temp) && (i <= (temp + k - 1))) ? k - 1 : r;\n\
            }\n\
            c = i - (((r + 1) * r) >> 1);\n\
\n\
            r = ref_x + r;\n\
            c = ref_y + c;\n\
\n\
            %TYPE res1, res2;\n\
            res1 = alpha * X[c * incx];\n\
            res2 = alpha * X[r * incx];\n\
            res1 = res1 * Y[r * incy];\n\
            res2 = res2 * Y[c * incy];\n\
\n\
            A[r + c * lda] += (res1 + res2);\n\
        }\n\
    }\n\
    else if ( i == (nBlocks - 1)) // Last Row Strip blocks ( May not fit into target region)\n\
    {\n\
\n\
        %TYPE%V loadedA;\n\
\n\
        // Populating xShared: May not fit into target region\n\
        for( int i = (ref_x + threadID); i < N; i += get_local_size(0))\n\
        {\n\
            xShared[i - ref_x] = X[ i * incx];\n\
            yShared[i - ref_x] = Y[ i * incy];\n\
        }\n\
\n\
        // Populating yShared: Always fits well..\n\
        for( int i = (ref_y  + threadID); (i - ref_y) < %TARGET_ROWS; i += get_local_size(0))\n\
        {\n\
            %TYPE loadedX = X[ i * incx];\n\
            %TYPE loadedY = Y[ i * incy];\n\
            xSharedConj[(i - ref_y) ] = loadedX;\n\
            ySharedConj[(i - ref_y) ] = loadedY;\n\
        }\n\
\n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
        // Loop %TARGET_ROWS / TARGET_WIDTH times\n\
        int nLoops = ((%TARGET_ROWS - 1)/ TARGET_WIDTH)  + 1;\n\
\n\
        int colShift = threadID / TARGET_ROWS_BY_VEC;\n\
        int rowShift = (threadID & ( TARGET_ROWS_BY_VEC - 1)) * %V;\n\
\n\
\n\
        int startRow = ref_x + rowShift;\n\
        %TYPE%V  loadedX, loadedY;\n\
\n\
        if ( startRow  < (N - (%V - 1)) )\n\
"
"\
        {\n\
            loadedX=  *((__local %TYPE%V*)( xShared + rowShift));\n\
            loadedY=  *((__local %TYPE%V*)( yShared + rowShift));\n\
        }\n\
\n\
        for( int i= 1; i <=  nLoops; i++)\n\
        {\n\
            int startCol = ref_y + colShift + ( i - 1 ) * TARGET_WIDTH;\n\
\n\
            if ( ( startRow  < N ) && ( startCol  < (ref_y + %TARGET_ROWS ) ) )// threads that fall into target region\n\
            {\n\
                if(( startRow + %V) > N )// Loop serially as can't do VLOAD\n\
                {\n\
                    %TYPE yValueConj = ySharedConj[ startCol - ref_y];\n\
                    %TYPE xValueConj = xSharedConj[ startCol - ref_y];\n\
\n\
                    for(int row = startRow; row < N; row++)\n\
                    {\n\
                        %TYPE xValue = xShared[ row - ref_x];\n\
                        %TYPE yValue = yShared[ row - ref_x];\n\
\n\
                        %TYPE res1, res2;\n\
                        // X * Y(H)\n\
                        %MUL(res1, alpha, yValueConj);\n\
                        %MUL( res2, res1,  xValue);\n\
\n\
                        // Y * X(H)\n\
                        %MUL(res1, alpha, xValueConj);\n\
                        %MAD( res2, res1,  yValue);\n\
                        A[ row + startCol * lda] += res2;\n\
                    }\n\
                }\n\
                else\n\
                {\n\
                    loadedA      = %VLOAD( 0, (&A[ startRow + startCol * lda]));\n\
\n\
                    %TYPE      loadedYConj = ySharedConj[ startCol - ref_y];\n\
                    %TYPE      loadedXConj = xSharedConj[ startCol - ref_y];\n\
                    %TYPE      res;\n\
\n\
                    // X * Y(H)\n\
                    %MUL(res, loadedYConj, alpha);\n\
                    %TYPE%V  resVec;\n\
                    resVec = %VMAKEVEC(res);\n\
                    %VMAD( loadedA, loadedX, resVec);\n\
\n\
                    // Y * X(H)\n\
                    %MUL(res, loadedXConj, alpha);\n\
                    resVec = %VMAKEVEC(res);\n\
                    %VMAD( loadedA, loadedY, resVec);\n\
"
"\
\n\
                    %VSTORE(  loadedA, 0, (&A[ startRow + startCol * lda]));\n\
                }\n\
            }\n\
        }\n\
    }\n\
    else // blocks that fit exactly.\n\
    {\n\
\n\
        %TYPE%V loadedA;\n\
\n\
        // Populating xShared\n\
        for( int i = (ref_x + threadID); (i - ref_x) < %TARGET_ROWS; i += get_local_size(0))\n\
        {\n\
            xShared[i - ref_x] = X[ i * incx];\n\
            yShared[i - ref_x] = Y[ i * incy];\n\
        }\n\
\n\
        // Populating yShared\n\
        for( int i = (ref_y + threadID); (i - ref_y) < %TARGET_ROWS; i += get_local_size(0))\n\
        {\n\
            %TYPE loadedX = X[ i * incx];\n\
            %TYPE loadedY = Y[ i * incy];\n\
            xSharedConj[i - ref_y] = loadedX;\n\
            ySharedConj[i - ref_y] = loadedY;\n\
        }\n\
\n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
        // Loop %TARGET_ROWS / TARGET_WIDTH times\n\
        int nLoops = ((%TARGET_ROWS - 1)/ TARGET_WIDTH)  + 1;\n\
\n\
        int colShift = threadID / TARGET_ROWS_BY_VEC;\n\
        int rowShift = (threadID & ( TARGET_ROWS_BY_VEC - 1)) * %V;\n\
\n\
        int startRow = ref_x + rowShift;\n\
        int startCol = ref_y + colShift;\n\
        %TYPE%V  loadedX, loadedY;\n\
\n\
        if ( startCol < ( ref_y + %TARGET_ROWS) ) // threads that fall into target region\n\
        {\n\
            loadedX     =  *((__local %TYPE%V*)( xShared + rowShift));\n\
            loadedY     =  *((__local %TYPE%V*)( yShared + rowShift));\n\
        }\n\
\n\
        //#pragma unroll\n\
        for( int i= 1; i <= nLoops; i++)\n\
        {\n\
            startCol = ref_y + colShift + ( i - 1 ) * TARGET_WIDTH;\n\
\n\
"
"\
            if ( startCol < ( ref_y + %TARGET_ROWS) ) // threads that fall into target region\n\
            {\n\
                loadedA       = %VLOAD( 0, (&A[ startRow + startCol * lda]));\n\
                %TYPE      loadedYConj = ySharedConj[ startCol - ref_y];\n\
                %TYPE      loadedXConj = xSharedConj[ startCol - ref_y];\n\
\n\
                // X * Y(H)\n\
                %TYPE      res;\n\
                %MUL(res, loadedYConj, alpha);\n\
                %TYPE%V  resVec;\n\
                resVec = %VMAKEVEC(res);\n\
                %VMAD( loadedA, loadedX, resVec);\n\
\n\
                // Y * X(H)\n\
                %MUL(res, loadedXConj, alpha);\n\
                resVec = %VMAKEVEC(res);\n\
                %VMAD( loadedA, loadedY, resVec);\n\
                %VSTORE(  loadedA, 0, (&A[ startRow + startCol * lda]));\n\
            }\n\
        }\n\
    }\n\
\n\
}\n\
\n";



//Column Major Upper
static const char *syr2_CU_kernel = "\
\n\
#ifdef DOUBLE_PRECISION\n\
    #ifdef cl_khr_fp64\n\
    #pragma OPENCL EXTENSION cl_khr_fp64 : enable\n\
    #else\n\
    #pragma OPENCL EXTENSION cl_amd_fp64 : enable\n\
    #endif\n\
#endif\n\
\n\
#define TARGET_ROWS_BY_VEC  (%TARGET_ROWS / %V)\n\
#define TARGET_WIDTH        (%BLOCKSIZE / TARGET_ROWS_BY_VEC )\n\
#define TARGET_HEIGHT       (%BLOCKSIZE / TARGET_ROWS_BY_VEC )\n\
// Column-Major Upper\n\
// nBlocks     = (N - 1)/ TR + 1\n\
// totalBlocks     = (nBlocks * ( nBlocks + 1)) / 2\n\
__kernel void %PREFIXsyr2_CU_kernel( __global const %TYPE* _A, __global const %TYPE* _X, __global const %TYPE* _Y, int N, int offx, int incx, int offy, int incy, int offa, int lda, %TYPE alpha)\n\
{\n\
\n\
    __global const %TYPE* X;\n\
    __global const %TYPE* Y;\n\
    __global %TYPE* A;\n\
\n\
    __local %TYPE xShared[%TARGET_ROWS];\n\
    __local %TYPE yShared[%TARGET_ROWS];\n\
    __local %TYPE xSharedConj[%TARGET_ROWS];\n\
    __local %TYPE ySharedConj[%TARGET_ROWS];\n\
\n\
    int nBlocks = ((N - 1) / %TARGET_ROWS) + 1;\n\
\n\
    A = _A + offa;\n\
\n\
    if ( incx < 0 ) // Goto end of vector\n\
    {\n\
        X    = _X + offx - ( N - 1) * incx;\n\
    }\n\
    else\n\
    {\n\
        X = _X + offx;\n\
    }\n\
\n\
    if ( incy < 0 ) // Goto end of vector\n\
    {\n\
        Y    = _Y + offy - ( N - 1) * incy;\n\
    }\n\
    else\n\
    {\n\
        Y = _Y + offy;\n\
    }\n\
\n\
"
"\
    int blockID  = get_group_id(0);\n\
    int threadID = get_local_id(0);\n\
\n\
    __local int iShared;\n\
    __local int jShared;\n\
\n\
    // Get (i,j) of Block\n\
    if ( threadID == 0)\n\
    {\n\
        int _i = 0, _j = 0;\n\
        //for ( _j = 0; _j < nBlocks; _j++)\n\
        for ( _j = (blockID / nBlocks); _j < nBlocks; _j++)\n\
        {\n\
            _i = blockID - ((_j*((2* nBlocks) + 1 - _j))/2) + _j;\n\
            if ( _i < nBlocks && ( _i >= 0) )\n\
            {\n\
                break;\n\
            }\n\
        }\n\
\n\
        iShared = _i;\n\
        jShared = _j;\n\
    }\n\
\n\
    barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
    int i = iShared;\n\
    int j = jShared;\n\
\n\
    int ref_x = (N- 1) - i * %TARGET_ROWS;\n\
    int ref_y = (N- 1) - j * %TARGET_ROWS;\n\
\n\
    // Load data into xShared and yShared\n\
    // Not a common task among blocks in the present implementation..\n\
\n\
    // Diagonal Blocks : Should handle not reading diagonal element complex value\n\
    // Diagonal blocks : Should handle the last block as well\n\
    // Scalar code in Present implementation\n\
    if ( i == j)\n\
    {\n\
         int ncols = ((ref_y - %TARGET_ROWS) >= 0) ? %TARGET_ROWS : (ref_y+1);\n\
        int nrows = ((ref_x - %TARGET_ROWS) >= 0) ? %TARGET_ROWS : (ref_x+1);\n\
        int nElements = ((nrows) * ((ncols) + 1)) >> 1;\n\
        nrows -= 1;\n\
        ncols -= 1;\n\
        for(i = threadID; i < nElements; i += get_local_size(0))\n\
        {\n\
            int r, c = -1;\n\
            for(int k = 1; (k <= %TARGET_ROWS); k ++)\n\
            {\n\
"
"\
                int temp = ((k - 1) * k) >> 1;\n\
                c = ((i >= temp) && (i <= (temp + k - 1))) ? k - 1 : c;\n\
            }\n\
            r = i - (((c + 1) * c) >> 1);\n\
\n\
            r = ref_x - (nrows) + r;\n\
            c = ref_y - (ncols) + c;\n\
\n\
            %TYPE res1, res2;\n\
            res1 = alpha * X[c * incx];\n\
            res2 = alpha * X[r * incx];\n\
            res1 = res1 * Y[r * incy];\n\
            res2 = res2 * Y[c * incy];\n\
            A[r + c * lda] += (res1 + res2);\n\
        }\n\
    }\n\
    else if ( i == (nBlocks - 1)) // Last Row Strip blocks ( May not fit into target region)\n\
    {\n\
\n\
        %TYPE%V loadedA;\n\
\n\
        // Populating xShared: May not fit into target region\n\
        for( int i = (ref_x - threadID); i >= 0; i -= get_local_size(0))\n\
        {\n\
            xShared[(%TARGET_ROWS - 1) - threadID] = X[ i * incx];\n\
            yShared[(%TARGET_ROWS - 1) - threadID] = Y[ i * incy];\n\
        }\n\
\n\
        // Populating yShared: Always fits well..\n\
        for( int i = (ref_y - threadID); (ref_y - i) < %TARGET_ROWS; i -= get_local_size(0))\n\
        {\n\
            %TYPE loadedX = X[ i * incx];\n\
            %TYPE loadedY = Y[ i * incy];\n\
            xSharedConj[(ref_y - i)] = loadedX;\n\
            ySharedConj[(ref_y - i)] = loadedY;\n\
        }\n\
\n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
        // Loop\n\
        int nLoops = ((%TARGET_ROWS - 1)/ TARGET_WIDTH)  + 1;\n\
\n\
        int colShift = threadID / TARGET_ROWS_BY_VEC;\n\
        int rowShift = ((threadID & ( TARGET_ROWS_BY_VEC - 1)) * %V) + (%V - 1);\n\
\n\
        int startRow = ref_x - rowShift;\n\
        %TYPE%V  loadedX, loadedY;\n\
\n\
        if ( startRow  >= 0 )\n\
        {\n\
"
"\
            loadedX=  *((__local %TYPE%V*)( &xShared[ (%TARGET_ROWS - 1) - rowShift]));\n\
            loadedY=  *((__local %TYPE%V*)( &yShared[ (%TARGET_ROWS - 1) - rowShift]));\n\
        }\n\
\n\
        for( int i= 1; i <=  nLoops; i++)\n\
        {\n\
            int startCol = ref_y - colShift - ( i - 1 ) * TARGET_WIDTH;\n\
\n\
            // threads that fall into target region\n\
            if( ( startRow  > -(%V) ) && (startCol > (ref_y - %TARGET_ROWS)) )\n\
            {\n\
                if( startRow  < 0 )// Loop serially as can't do VLOAD\n\
                {\n\
                    %TYPE yValueConj = ySharedConj[ ref_y - startCol];\n\
                    %TYPE xValueConj = xSharedConj[ ref_y - startCol];\n\
\n\
                    for(int row = startRow + (%V - 1); row >= 0; row--)\n\
                    {\n\
                        %TYPE xValue = xShared[ %TARGET_ROWS - 1 - (ref_x - row)];\n\
                        %TYPE yValue = yShared[ %TARGET_ROWS - 1 - (ref_x - row)];\n\
\n\
                        %TYPE res1, res2;\n\
\n\
                        // X * Y(H)\n\
                        %MUL(res1, alpha, yValueConj);\n\
                        %MUL( res2, res1,  xValue);\n\
\n\
                        // Y * X(H)\n\
                        %MUL(res1, alpha, xValueConj);\n\
                        %MAD( res2, res1,  yValue);\n\
                        A[ row + startCol * lda] += res2;\n\
                    }\n\
                }\n\
                else\n\
                {\n\
                    loadedA  = %VLOAD( 0, (&A[ startRow + startCol * lda]));\n\
\n\
                    %TYPE      loadedXConj = xSharedConj[ ref_y - startCol];\n\
                    %TYPE      loadedYConj = ySharedConj[ ref_y - startCol];\n\
                    %TYPE      res;\n\
                    // X * Y(H)\n\
                    %MUL(res, loadedYConj, alpha);\n\
                    %TYPE%V  resVec;\n\
                    resVec = %VMAKEVEC(res);\n\
                    %VMAD( loadedA, loadedX, resVec);\n\
\n\
                    // Y * X(H)\n\
                    %MUL(res, loadedXConj, alpha);\n\
                    resVec = %VMAKEVEC(res);\n\
                    %VMAD( loadedA, loadedY, resVec);\n\
"
"\
                    %VSTORE(  loadedA, 0, (&A[ startRow + startCol * lda]));\n\
                }\n\
            }\n\
        }\n\
    }\n\
    else // blocks that fit exactly.\n\
    {\n\
        %TYPE%V loadedA;\n\
\n\
        // Populating xShared\n\
        for( int i = (ref_x - threadID); ((ref_x - i) < %TARGET_ROWS); i -= get_local_size(0))\n\
        {\n\
            xShared[ (%TARGET_ROWS - 1) - (ref_x - i)] = X[ i * incx];\n\
            yShared[ (%TARGET_ROWS - 1) - (ref_x - i)] = Y[ i * incy];\n\
        }\n\
\n\
        // Populating yShared\n\
        for( int i = (ref_y - threadID); (ref_y - i) < %TARGET_ROWS; i -= get_local_size(0))\n\
        {\n\
            %TYPE loadedX = X[ i * incx];\n\
            %TYPE loadedY = Y[ i * incy];\n\
            xSharedConj[(ref_y - i)] = loadedX;\n\
            ySharedConj[(ref_y - i)] = loadedY;\n\
        }\n\
\n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
        // Loop %TARGET_ROWS / TARGET_WIDTH times\n\
        int nLoops = ((%TARGET_ROWS - 1)/ TARGET_WIDTH)  + 1;\n\
\n\
        int colShift = threadID / TARGET_ROWS_BY_VEC;\n\
        int rowShift = ((threadID & ( TARGET_ROWS_BY_VEC - 1)) * %V) + (%V - 1);\n\
\n\
\n\
        int startRow = ref_x - rowShift;\n\
        int startCol = ref_y - colShift;\n\
        %TYPE%V  loadedX, loadedY;\n\
        // Not all threads should do this..\n\
        // Depends on whether blocksize width is > target_rows\n\
        if ( startCol > ( ref_y - %TARGET_ROWS) ) // threads that fall into target region\n\
        {\n\
            loadedX=  *((__local %TYPE%V*)( &xShared[ (%TARGET_ROWS - 1)- rowShift]));\n\
            loadedY=  *((__local %TYPE%V*)( &yShared[ (%TARGET_ROWS - 1)- rowShift]));\n\
        }\n\
\n\
        for( int i= 1; i <= nLoops; i++)\n\
        {\n\
            startCol = ref_y - colShift - ( i - 1 ) * TARGET_WIDTH;\n\
\n\
            if ( startCol > ( ref_y - %TARGET_ROWS) ) // threads that fall into target region\n\
"
"\
            {\n\
                loadedA                = %VLOAD( 0, (&A[ startRow + startCol * lda]));\n\
                %TYPE      loadedYConj = ySharedConj[ ref_y - startCol];\n\
                 %TYPE      loadedXConj = xSharedConj[ ref_y - startCol];\n\
                %TYPE      res;\n\
                // X * Y(H)\n\
                %MUL(res, loadedYConj, alpha);\n\
                %TYPE%V  resVec;\n\
                resVec = %VMAKEVEC(res);\n\
                %VMAD( loadedA, loadedX, resVec);\n\
\n\
                // Y * X(H)\n\
                %MUL(res, loadedXConj, alpha);\n\
                resVec = %VMAKEVEC(res);\n\
                %VMAD( loadedA, loadedY, resVec);\n\
                %VSTORE(  loadedA, 0, (&A[ startRow + startCol * lda]));\n\
            }\n\
        }\n\
\n\
    }\n\
}\n\
";



/*
//Row Major Lower
static const char *syr2_RL_kernel = "\
\n\
#ifdef DOUBLE_PRECISION\n\
    #ifdef cl_khr_fp64\n\
    #pragma OPENCL EXTENSION cl_khr_fp64 : enable\n\
    #else\n\
    #pragma OPENCL EXTENSION cl_amd_fp64 : enable\n\
    #endif\n\
#endif\n\
\n\
#define TARGET_ROWS_BY_VEC  (%TARGET_ROWS / %V)\n\
#define TARGET_WIDTH        (%BLOCKSIZE / TARGET_ROWS_BY_VEC )\n\
#define TARGET_HEIGHT       (%BLOCKSIZE / TARGET_ROWS_BY_VEC )\n\
//\n\
//nBlocks = 4\n\
//\n\
//Blocks:    9\n\
//    7 8\n\
//    4 5 6\n\
//    0 1 2 3\n\
//\n\
\n\
// Row-Major Lower\n\
// nBlocks     = (N - 1)/ TR + 1\n\
// totalBlocks     = (nBlocks * ( nBlocks + 1)) / 2\n\
__kernel void %PREFIXsyr2_RL_kernel( __global const %TYPE* _A, __global const %TYPE* _X, __global const %TYPE* _Y, int N, int offx, int incx, int offy, int incy, int offa, int lda, %TYPE alpha)\n\
{\n\
\n\
    __global const %TYPE* X;\n\
    __global const %TYPE* Y;\n\
    __global %TYPE* A;\n\
\n\
    __local %TYPE xShared[%TARGET_ROWS];\n\
    __local %TYPE yShared[%TARGET_ROWS];\n\
    __local %TYPE xSharedConj[%TARGET_ROWS];\n\
    __local %TYPE ySharedConj[%TARGET_ROWS];\n\
\n\
    int nBlocks = ((N - 1) / %TARGET_ROWS) + 1;\n\
\n\
    A = _A + offa;\n\
\n\
    if ( incx < 0 ) // Goto end of vector\n\
    {\n\
        X    = _X + offx - ( N - 1) * incx;\n\
    }\n\
    else\n\
    {\n\
        X = _X + offx;\n\
    }\n\
\n\
"
"\
    if ( incy < 0 ) // Goto end of vector\n\
    {\n\
        Y    = _Y + offy - ( N - 1) * incy;\n\
    }\n\
    else\n\
    {\n\
        Y = _Y + offy;\n\
    }\n\
\n\
    int blockID  = get_group_id(0);\n\
    int threadID = get_local_id(0);\n\
\n\
    __local int iShared;\n\
    __local int jShared;\n\
\n\
    // Get (i,j) of Block\n\
    if ( threadID == 0)\n\
    {\n\
        int _i = 0, _j = 0;\n\
        for ( _j = (blockID / nBlocks); _j < nBlocks; _j++)\n\
        {\n\
            _i = blockID - ((_j*((2* nBlocks) + 1 - _j))/2) + _j;\n\
            if ( _i < nBlocks && ( _i >= 0) )\n\
            {\n\
                break;\n\
            }\n\
        }\n\
\n\
        iShared = _i;\n\
        jShared = _j;\n\
    }\n\
\n\
    barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
    int i = iShared;\n\
    int j = jShared;\n\
\n\
\n\
    int ref_x = ((nBlocks - 1) * %TARGET_ROWS) - (j * %TARGET_ROWS);\n\
    int ref_y = (i -j) * %TARGET_ROWS;\n\
\n\
    // Load data into xShared and yShared\n\
    // Not a common task among blocks in the present implementation..\n\
\n\
    // Diagonal Blocks : Should handle not reading diagonal element complex value\n\
    // Diagonal blocks : Should handle the last block as well\n\
    // Scalar code in Present implementation\n\
    if ( ref_x == ref_y )\n\
    {\n\
        // Need only xShared, not using yShared\n\
"
"\
        for( int i = (ref_x + threadID); (i < N && (i - ref_x) < %TARGET_ROWS); i += get_local_size(0))\n\
        {\n\
            xShared[(i - ref_x)] = X[ i * incx];\n\
            yShared[(i - ref_x)] = Y[ i * incy];\n\
        }\n\
\n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
        int rowShift = threadID / %TARGET_ROWS;\n\
        int colShift = (threadID & ( %TARGET_ROWS - 1));\n\
\n\
        int target_height = %BLOCKSIZE / %TARGET_ROWS;\n\
\n\
        int nLoops = ((%TARGET_ROWS - 1)/ target_height)  + 1;\n\
        int startRow = ref_x + rowShift;\n\
\n\
        %TYPE yValue, xValue, yValueRead, xValueRead, yValueConj, xValueConj;\n\
\n\
        // startCol remains constant on looping\n\
        // Therefore, following code is based on startCol\n\
        int startCol = ref_y + colShift;\n\
\n\
        bool readXY          = false;\n\
        for( int i= 1; i <=  nLoops; i++)\n\
        {\n\
            startRow = ref_x + rowShift + ( i - 1 ) * target_height;\n\
\n\
            bool activeThread =  ( startCol < N) && ( startRow < N) && ((startRow -  ref_x) < %TARGET_ROWS);\n\
\n\
            if (activeThread)\n\
            {\n\
                // Avoid reading Y again if already read using readXY\n\
                if (( startRow >= startCol) && (!readXY))\n\
                {\n\
                    yValueRead = yShared[ startCol - ref_y];\n\
                    xValueRead = xShared[ startCol - ref_y];\n\
                    readXY        = true;\n\
                }\n\
\n\
                if ( startRow > startCol )\n\
                {\n\
                    %TYPE res1, res2;\n\
                    yValueConj = yValueRead;\n\
                    xValueConj = xValueRead;\n\
\n\
                    xValue = xShared[ startRow - ref_x ];\n\
                    yValue = yShared[ startRow - ref_x ];\n\
\n\
                    // X * Y(H)\n\
                    %MUL(res1, alpha, yValueConj);\n\
"
"\
                    %MUL( res2, res1,  xValue);\n\
\n\
                    // Y * X(H)\n\
                    %MUL(res1, alpha, xValueConj);\n\
                    %MAD( res2, res1, yValue);\n\
                    A[ startRow * lda + startCol] += res2;\n\
                }\n\
                else if ( startRow == startCol) // Diagonal\n\
                {\n\
                    yValueConj = yValueRead;\n\
                    xValueConj = xValueRead;\n\
                    yValue        = yValueRead;\n\
                    xValue     = xValueRead;\n\
\n\
                    %TYPE res1, res2;\n\
                    // X * Y(H)\n\
                    %MUL(res1, alpha, yValueConj);\n\
                    %MUL( res2, res1,  xValue);\n\
\n\
                    // Y * X(H)\n\
                    %MUL(res1, alpha, xValueConj);\n\
                    %MAD( res2, res1, yValue);\n\
\n\
                    // Discard the imaginary component of A\n\
                    %ADD(A[ startRow * lda + startCol], A[ startRow * lda + startCol], res2);\n\
                }\n\
            }\n\
        }\n\
    }\n\
    else if ( ref_x == ((nBlocks - 1) * %TARGET_ROWS)) // Last Row Strip blocks ( May not fit into target region)\n\
    {\n\
\n\
        %TYPE%V loadedA;\n\
\n\
        // Populating xShared: May not fit into target region\n\
        for( int i = (ref_x + threadID); i < N; i += get_local_size(0))\n\
        {\n\
            xShared[i - ref_x] = X[ i * incx];\n\
            yShared[i - ref_x] = Y[ i * incy];\n\
        }\n\
\n\
        // Populating yShared: Always fits well..\n\
        for( int i = (ref_y  + threadID); (i - ref_y) < %TARGET_ROWS; i += get_local_size(0))\n\
        {\n\
            %TYPE loadedX = X[ i * incx];\n\
            %TYPE loadedY = Y[ i * incy];\n\
            xSharedConj[(i - ref_y) ] = loadedX;\n\
            ySharedConj[(i - ref_y) ] = loadedY;\n\
        }\n\
\n\
"
"\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
        // Loop %TARGET_ROWS / TARGET_WIDTH times\n\
        int nLoops = ((%TARGET_ROWS - 1)/ TARGET_HEIGHT)  + 1;\n\
\n\
        int rowShift = threadID / TARGET_ROWS_BY_VEC;\n\
        int colShift = (threadID & ( TARGET_ROWS_BY_VEC - 1)) * %V;\n\
\n\
\n\
        int startRow = ref_x + rowShift;\n\
        int startCol = ref_y + colShift; // Remains fixed\n\
        %TYPE%V  loadedYConj, loadedXConj;\n\
\n\
        if ( startRow  < N )\n\
        {\n\
            loadedYConj =  *((__local %TYPE%V*)( ySharedConj + colShift));\n\
            loadedXConj =  *((__local %TYPE%V*)( xSharedConj + colShift));\n\
        }\n\
\n\
        for( int i= 1; i <=  nLoops; i++)\n\
        {\n\
            int startRow = ref_x + rowShift + ( i - 1 ) * TARGET_HEIGHT;\n\
\n\
            if (  startRow  < N  )// threads that fall into target region\n\
            {\n\
                    loadedA      = %VLOAD( 0, (&A[ startRow * lda + startCol]));\n\
\n\
                    %TYPE      loadedX= xShared[ startRow - ref_x];\n\
                    %TYPE      loadedY= yShared[ startRow - ref_x];\n\
                    %TYPE      res;\n\
                    // X * Y(H)\n\
                    %MUL(res, loadedX, alpha);\n\
                    %TYPE%V  resVec;\n\
                    resVec = %VMAKEVEC(res);\n\
                    %VMAD( loadedA, loadedYConj, resVec);\n\
\n\
                    // Y * X(H)\n\
                    %MUL(res, loadedY, alpha);\n\
                    resVec = %VMAKEVEC(res);\n\
                    %VMAD( loadedA, loadedXConj, resVec);\n\
                    %VSTORE(  loadedA, 0, (&A[ startRow * lda + startCol]));\n\
            }\n\
        }\n\
    }\n\
    else // blocks that fit exactly.\n\
    {\n\
\n\
        %TYPE%V loadedA;\n\
\n\
        // Populating xShared\n\
"
"\
        for( int i = (ref_x + threadID); (i - ref_x) < %TARGET_ROWS; i += get_local_size(0))\n\
        {\n\
            xShared[i - ref_x] = X[ i * incx];\n\
            yShared[i - ref_x] = Y[ i * incy];\n\
        }\n\
\n\
        // Populating yShared\n\
        for( int i = (ref_y + threadID); (i - ref_y) < %TARGET_ROWS; i += get_local_size(0))\n\
        {\n\
            %TYPE loadedX = X[ i * incx];\n\
            %TYPE loadedY = Y[ i * incy];\n\
            xSharedConj[i - ref_y] = loadedX;\n\
            ySharedConj[i - ref_y] = loadedY;\n\
        }\n\
\n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
        // Loop %TARGET_ROWS / TARGET_WIDTH times\n\
        int nLoops = ((%TARGET_ROWS - 1)/ TARGET_HEIGHT)  + 1;\n\
\n\
        int rowShift = threadID / TARGET_ROWS_BY_VEC;\n\
        int colShift = (threadID & ( TARGET_ROWS_BY_VEC - 1)) * %V;\n\
\n\
        int startRow = ref_x + rowShift;\n\
        int startCol = ref_y + colShift;\n\
        %TYPE%V  loadedYConj, loadedXConj;\n\
\n\
        if ( startRow < ( ref_x + %TARGET_ROWS) ) // threads that fall into target region\n\
        {\n\
            loadedYConj     =  *((__local %TYPE%V*)( ySharedConj + colShift));\n\
            loadedXConj     =  *((__local %TYPE%V*)( xSharedConj + colShift));\n\
        }\n\
\n\
        //#pragma unroll\n\
        for( int i= 1; i <= nLoops; i++)\n\
        {\n\
            startRow = ref_x + rowShift + ( i - 1 ) * TARGET_HEIGHT;\n\
\n\
            if ( startRow < ( ref_x + %TARGET_ROWS) ) // threads that fall into target region\n\
            {\n\
                loadedA      = %VLOAD( 0, (&A[ startRow * lda + startCol]));\n\
\n\
                %TYPE      loadedX = xShared[ startRow - ref_x];\n\
                %TYPE      loadedY = yShared[ startRow - ref_x];\n\
\n\
                %TYPE      res;\n\
                // X * Y(H)\n\
                %MUL(res, loadedX, alpha);\n\
                %TYPE%V  resVec;\n\
                resVec = %VMAKEVEC(res);\n\
"
"\
                %VMAD( loadedA, loadedYConj, resVec);\n\
\n\
                // X * Y(H)\n\
                %MUL(res, loadedY, alpha);\n\
                resVec = %VMAKEVEC(res);\n\
                %VMAD( loadedA, loadedXConj, resVec);\n\
\n\
                %VSTORE(  loadedA, 0, (&A[ startRow * lda + startCol]));\n\
            }\n\
        }\n\
    }\n\
}\n\
\n";



//Row Major Upper
static const char *syr2_RU_kernel = "\
\n\
#ifdef DOUBLE_PRECISION\n\
    #ifdef cl_khr_fp64\n\
    #pragma OPENCL EXTENSION cl_khr_fp64 : enable\n\
    #else\n\
    #pragma OPENCL EXTENSION cl_amd_fp64 : enable\n\
    #endif\n\
#endif\n\
\n\
#define TARGET_ROWS_BY_VEC  (%TARGET_ROWS / %V)\n\
#define TARGET_WIDTH        (%BLOCKSIZE / TARGET_ROWS_BY_VEC )\n\
#define TARGET_HEIGHT       (%BLOCKSIZE / TARGET_ROWS_BY_VEC )\n\
//\n\
//nBlocks = 4\n\
//\n\
//Blocks:    9\n\
//\n\
//    3 2 1 0\n\
//      6 5 4\n\
//        7 8\n\
//          9\n\
//\n\
//    -----------\n\
//    |<-threadID|\n\
//    | 3 2 1 0  |\n\
//    ----------(ref_x, ref_y)\n\
//\n\
\n\
// Row-Major Upper\n\
// nBlocks     = (N - 1)/ TR + 1\n\
// totalBlocks     = (nBlocks * ( nBlocks + 1)) / 2\n\
__kernel void %PREFIXher2_RU_kernel( __global const %TYPE* _A, __global const %TYPE* _X, __global const %TYPE* _Y, int N, int offx, int incx, int offy, int incy, int offa, int lda, %TYPE alpha)\n\
{\n\
\n\
    __global const %TYPE* X;\n\
    __global const %TYPE* Y;\n\
    __global %TYPE* A;\n\
\n\
    __local %TYPE xShared[%TARGET_ROWS];\n\
    __local %TYPE yShared[%TARGET_ROWS];\n\
    __local %TYPE xSharedConj[%TARGET_ROWS];\n\
    __local %TYPE ySharedConj[%TARGET_ROWS];\n\
\n\
    int nBlocks = ((N - 1) / %TARGET_ROWS) + 1;\n\
\n\
    A = _A + offa;\n\
\n\
    if ( incx < 0 ) // Goto end of vector\n\
    {\n\
"
"\
        X    = _X + offx - ( N - 1) * incx;\n\
    }\n\
    else\n\
    {\n\
        X = _X + offx;\n\
    }\n\
\n\
    if ( incy < 0 ) // Goto end of vector\n\
    {\n\
        Y    = _Y + offy - ( N - 1) * incy;\n\
    }\n\
    else\n\
    {\n\
        Y = _Y + offy;\n\
    }\n\
\n\
    int blockID  = get_group_id(0);\n\
    int threadID = get_local_id(0);\n\
\n\
    __local int iShared;\n\
    __local int jShared;\n\
\n\
    // Get (i,j) of Block\n\
    if ( threadID == 0)\n\
    {\n\
        int _i = 0, _j = 0;\n\
        for ( _j = (blockID / nBlocks); _j < nBlocks; _j++)\n\
        {\n\
            _i = blockID - ((_j*((2* nBlocks) + 1 - _j))/2) + _j;\n\
            if ( _i < nBlocks && ( _i >= 0) )\n\
            {\n\
                break;\n\
            }\n\
        }\n\
\n\
        iShared = _i;\n\
        jShared = _j;\n\
    }\n\
\n\
    barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
    int i = iShared;\n\
    int j = jShared;\n\
\n\
\n\
    int ref_x = (N - 1) - ((nBlocks - 1 - j) * %TARGET_ROWS);\n\
    int ref_y = (N - 1) - (i -j) * %TARGET_ROWS;\n\
\n\
    // Load data into xShared and yShared\n\
    // Not a common task among blocks in the present implementation..\n\
"
"\
\n\
    // Diagonal Blocks : Should handle not reading diagonal element complex value\n\
    // Diagonal blocks : Should handle the last block as well\n\
    // Scalar code in Present implementation\n\
    if ( ref_x == ref_y )\n\
    {\n\
        // Need only xShared, not using yShared\n\
        // Can use ref_x or ref_y\n\
        for( int i =  (ref_x - threadID); (i >= 0 && ((ref_x - i) < %TARGET_ROWS)); i -= get_local_size(0))\n\
        {\n\
            xShared[ (ref_x - i)] = X[ i * incx];\n\
            yShared[ (ref_x - i)] = Y[ i * incy];\n\
        }\n\
\n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
        int rowShift = threadID / %TARGET_ROWS;\n\
        int colShift = (threadID & ( %TARGET_ROWS - 1));\n\
\n\
        int target_height = %BLOCKSIZE / %TARGET_ROWS;\n\
\n\
        int nLoops = ((%TARGET_ROWS - 1)/ target_height)  + 1;\n\
        int startRow = ref_x - rowShift;\n\
\n\
        %TYPE yValue, xValue, yValueRead, xValueRead, xValueConj, yValueConj;\n\
\n\
        int startCol = ref_y - colShift; // remains fixed on looping\n\
\n\
        bool readXY = false;\n\
        for( int i= 1; i <=  nLoops; i++)\n\
        {\n\
            startRow = ref_x - rowShift - ( i - 1 ) * target_height;\n\
            bool activeThread = ( startRow >= 0) && ( startCol >= 0) && (( ref_x - startRow) < %TARGET_ROWS);\n\
\n\
            if ( activeThread)\n\
            {\n\
                // Avoid reading yValue again for threads that have it already while looping\n\
                if (( startCol >= startRow ) && (!readXY))\n\
                {\n\
                    xValueRead = xShared[ ref_y - startCol];\n\
                    yValueRead = yShared[ ref_y - startCol];\n\
                    readXY = true;\n\
                }\n\
\n\
                if ( startCol > startRow )\n\
                {\n\
                    %TYPE res1, res2;\n\
                    yValueConj = yValueRead;\n\
                    xValueConj = xValueRead;\n\
\n\
"
"\
                    xValue = xShared[ ref_x - startRow];\n\
                    yValue = yShared[ ref_x - startRow];\n\
\n\
                    // X * Y(H)\n\
                    %MUL(res1, alpha, yValueConj);\n\
                    %MUL(res2, res1, xValue);\n\
\n\
                    // X * Y(H)\n\
                    %MUL(res1, alpha, xValueConj);\n\
                    %MAD( res2, res1,  yValue);\n\
\n\
                    A[ startRow * lda + startCol] += res2;\n\
                }\n\
                else if (startRow == startCol) // Diagonal\n\
                {\n\
                    // The y Values can be obtained from  xValues\n\
                    xValue     = xValueRead;\n\
                    yValue        = yValueRead;\n\
                    xValueConj = xValueRead;\n\
                    yValueConj = yValueRead;\n\
\n\
                    %TYPE res1, res2;\n\
                    // X * Y(H)\n\
                    %MUL(res1, alpha, yValueConj);\n\
                    %MUL(res2, res1,  xValue);\n\
                    // Y * X(H)\n\
                    %MUL(res1, alpha, xValueConj);\n\
                    %MAD(res2, res1,  yValue);\n\
\n\
                    // Discard the imaginary component of A\n\
                    %ADD(A[ startRow * lda + startCol], A[ startRow * lda + startCol], res2);\n\
                }\n\
            }\n\
        }\n\
    }\n\
    else if ( ref_x == (( N - 1) - ((nBlocks - 1) * %TARGET_ROWS))) // First Row Strip blocks ( May not fit into target region)\n\
    {\n\
        %TYPE%V loadedA;\n\
\n\
        // Populating xShared: May not fit into target region\n\
        for( int i = (ref_x - threadID); i >= 0; i -= get_local_size(0))\n\
        {\n\
            xShared[ref_x - i] = X[ i * incx];\n\
            yShared[ref_x - i] = Y[ i * incy];\n\
        }\n\
\n\
        // Populating yShared: Always fits well..\n\
        for( int i = (ref_y - threadID); (ref_y - i) < %TARGET_ROWS; i -= get_local_size(0))\n\
        {\n\
            %TYPE loadedX = X[ i * incx];\n\
"
"\
            %TYPE loadedY = Y[ i * incy];\n\
            xSharedConj[(%TARGET_ROWS - 1) - (ref_y - i)] = loadedX;\n\
            ySharedConj[(%TARGET_ROWS - 1) - (ref_y - i)] = loadedY;\n\
        }\n\
\n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
        // Loop\n\
        int nLoops = ((%TARGET_ROWS - 1)/ TARGET_HEIGHT)  + 1;\n\
\n\
        int rowShift = threadID / TARGET_ROWS_BY_VEC;\n\
        int colShift = ((threadID & ( TARGET_ROWS_BY_VEC - 1)) * %V) + (%V - 1);\n\
\n\
        int startRow = ref_x - rowShift;\n\
        int startCol = ref_y - colShift;\n\
\n\
        %TYPE%V  loadedYConj, loadedXConj;\n\
\n\
        if ( startRow  >= 0 )\n\
        {\n\
            loadedYConj =  *((__local %TYPE%V*)( &ySharedConj[ (%TARGET_ROWS - 1) - colShift]));\n\
            loadedXConj =  *((__local %TYPE%V*)( &xSharedConj[ (%TARGET_ROWS - 1) - colShift]));\n\
        }\n\
\n\
        for( int i= 1; i <=  nLoops; i++)\n\
        {\n\
            int startRow = ref_x - rowShift - ( i - 1 ) * TARGET_HEIGHT;\n\
\n\
            if ( startRow  >= 0 )\n\
            {\n\
                    loadedA  = %VLOAD( 0, (&A[ startRow * lda + startCol]));\n\
\n\
                    %TYPE      loadedX = xShared[ ref_x - startRow];\n\
                    %TYPE      loadedY = yShared[ ref_x - startRow];\n\
                    %TYPE      res;\n\
                    // X * Y(H)\n\
                    %MUL(res, loadedX, alpha);\n\
                    %TYPE%V  resVec;\n\
                    resVec = %VMAKEVEC(res);\n\
                    %VMAD( loadedA, loadedYConj, resVec);\n\
\n\
                    // Y * X(H)\n\
                    %MUL(res, loadedY, alpha);\n\
                    resVec = %VMAKEVEC(res);\n\
                    %VMAD( loadedA, loadedXConj, resVec);\n\
\n\
                    %VSTORE(  loadedA, 0, (&A[ startRow * lda + startCol]));\n\
            }\n\
        }\n\
    }\n\
"
"\
    else // blocks that fit exactly.\n\
    {\n\
        %TYPE%V loadedA;\n\
\n\
        // Populating xShared\n\
        for( int i = (ref_x - threadID); ((ref_x - i) < %TARGET_ROWS); i -= get_local_size(0))\n\
        {\n\
            xShared[(ref_x - i)] = X[ i * incx];\n\
            yShared[(ref_x - i)] = Y[ i * incy];\n\
        }\n\
\n\
        // Populating yShared\n\
        for( int i = (ref_y - threadID); (ref_y - i) < %TARGET_ROWS; i -= get_local_size(0))\n\
        {\n\
            %TYPE loadedX = X[ i * incx];\n\
            %TYPE loadedY = Y[ i * incy];\n\
            xSharedConj[(%TARGET_ROWS - 1) - (ref_y - i)] = loadedX;\n\
            ySharedConj[(%TARGET_ROWS - 1) - (ref_y - i)] = loadedY;\n\
        }\n\
\n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
        // Loop %TARGET_ROWS / TARGET_WIDTH times\n\
        int nLoops = ((%TARGET_ROWS - 1)/ TARGET_HEIGHT)  + 1;\n\
\n\
        int rowShift = threadID / TARGET_ROWS_BY_VEC;\n\
        int colShift = ((threadID & ( TARGET_ROWS_BY_VEC - 1)) * %V) + (%V - 1);\n\
\n\
\n\
        int startRow = ref_x - rowShift;\n\
        int startCol = ref_y - colShift;\n\
\n\
        %TYPE%V  loadedYConj, loadedXConj;\n\
        // Not all threads should do this..\n\
        // Depends on whether blocksize width is > target_rows\n\
        if ( startRow > ( ref_x - %TARGET_ROWS) ) // threads that fall into target region\n\
        {\n\
            loadedYConj =  *((__local %TYPE%V*)( &ySharedConj[ (%TARGET_ROWS - 1) - colShift]));\n\
            loadedXConj =  *((__local %TYPE%V*)( &xSharedConj[ (%TARGET_ROWS - 1) - colShift]));\n\
        }\n\
\n\
        for( int i= 1; i <= nLoops; i++)\n\
        {\n\
            startRow = ref_x - rowShift - ( i - 1 ) * TARGET_HEIGHT;\n\
\n\
            if ( startRow > ( ref_x - %TARGET_ROWS) ) // threads that fall into target region\n\
            {\n\
                loadedA  = %VLOAD( 0, (&A[ startRow * lda + startCol]));\n\
\n\
                %TYPE      loadedX = xShared[ ref_x - startRow];\n\
"
"\
                %TYPE      loadedY = yShared[ ref_x - startRow];\n\
                %TYPE      res;\n\
                // X * Y(H)\n\
                %MUL(res, loadedX, alpha);\n\
                %TYPE%V  resVec;\n\
                resVec = %VMAKEVEC(res);\n\
                %VMAD( loadedA, loadedYConj, resVec);\n\
\n\
                // Y * X(H)\n\
                %MUL(res, loadedY, alpha);\n\
                resVec = %VMAKEVEC(res);\n\
                %VMAD( loadedA, loadedXConj, resVec);\n\
\n\
                %VSTORE(  loadedA, 0, (&A[ startRow * lda + startCol]));\n\
\n\
            }\n\
        }\n\
\n\
    }\n\
}\n\
\n";


*/

