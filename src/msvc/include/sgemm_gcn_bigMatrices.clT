static const char * sgemm_NT_128_128_16_16x16_8x8__ALPHABETA = "\
#define  M8x8 \\n\
            rA[0][0] = lA[offA + 0];                  \\n\
            rA[0][1] = lA[offA + 16];                  \\n\
            rA[0][2] = lA[offA + 32];                  \\n\
            rA[0][3] = lA[offA + 48];                  \\n\
            rA[0][4] = lA[offA + 64];                  \\n\
            rA[0][5] = lA[offA + 80];                  \\n\
            rA[0][6] = lA[offA + 96];                  \\n\
            rA[0][7] = lA[offA + 112];                  \\n\
            rB[0][0] = lB[offB + 0];                  \\n\
            rB[0][1] = lB[offB + 16];                  \\n\
            rB[0][2] = lB[offB + 32];                  \\n\
            rB[0][3] = lB[offB + 48];                  \\n\
            rB[0][4] = lB[offB + 64];                  \\n\
            rB[0][5] = lB[offB + 80];                  \\n\
            rB[0][6] = lB[offB + 96];                  \\n\
            rB[0][7] = lB[offB + 112];                  \\n\
            offA += 129;                              \\n\
            offB += 129;                              \\n\
            rC[0][0]=mad(rA[0][0],rB[0][0],rC[0][0]); \\n\
            rC[1][0]=mad(rA[0][1],rB[0][0],rC[1][0]); \\n\
            rC[2][0]=mad(rA[0][2],rB[0][0],rC[2][0]); \\n\
            rC[3][0]=mad(rA[0][3],rB[0][0],rC[3][0]); \\n\
            rC[4][0]=mad(rA[0][4],rB[0][0],rC[4][0]); \\n\
            rC[5][0]=mad(rA[0][5],rB[0][0],rC[5][0]); \\n\
            rC[6][0]=mad(rA[0][6],rB[0][0],rC[6][0]); \\n\
            rC[7][0]=mad(rA[0][7],rB[0][0],rC[7][0]); \        \n\
            rC[0][1]=mad(rA[0][0],rB[0][1],rC[0][1]); \\n\
            rC[1][1]=mad(rA[0][1],rB[0][1],rC[1][1]); \\n\
            rC[2][1]=mad(rA[0][2],rB[0][1],rC[2][1]); \\n\
            rC[3][1]=mad(rA[0][3],rB[0][1],rC[3][1]); \\n\
            rC[4][1]=mad(rA[0][4],rB[0][1],rC[4][1]); \\n\
            rC[5][1]=mad(rA[0][5],rB[0][1],rC[5][1]); \\n\
            rC[6][1]=mad(rA[0][6],rB[0][1],rC[6][1]); \    \n\
            rC[7][1]=mad(rA[0][7],rB[0][1],rC[7][1]); \                \n\
            rC[0][2]=mad(rA[0][0],rB[0][2],rC[0][2]); \\n\
            rC[1][2]=mad(rA[0][1],rB[0][2],rC[1][2]); \\n\
            rC[2][2]=mad(rA[0][2],rB[0][2],rC[2][2]); \\n\
            rC[3][2]=mad(rA[0][3],rB[0][2],rC[3][2]); \\n\
            rC[4][2]=mad(rA[0][4],rB[0][2],rC[4][2]); \\n\
            rC[5][2]=mad(rA[0][5],rB[0][2],rC[5][2]); \\n\
            rC[6][2]=mad(rA[0][6],rB[0][2],rC[6][2]); \\n\
            rC[7][2]=mad(rA[0][7],rB[0][2],rC[7][2]); \            \n\
            rC[0][3]=mad(rA[0][0],rB[0][3],rC[0][3]); \\n\
            rC[1][3]=mad(rA[0][1],rB[0][3],rC[1][3]); \\n\
            rC[2][3]=mad(rA[0][2],rB[0][3],rC[2][3]); \\n\
            rC[3][3]=mad(rA[0][3],rB[0][3],rC[3][3]); \\n\
            rC[4][3]=mad(rA[0][4],rB[0][3],rC[4][3]); \\n\
            rC[5][3]=mad(rA[0][5],rB[0][3],rC[5][3]); \\n\
"
"\
            rC[6][3]=mad(rA[0][6],rB[0][3],rC[6][3]); \\n\
            rC[7][3]=mad(rA[0][7],rB[0][3],rC[7][3]); \            \n\
            rC[0][4]=mad(rA[0][0],rB[0][4],rC[0][4]); \\n\
            rC[1][4]=mad(rA[0][1],rB[0][4],rC[1][4]); \\n\
            rC[2][4]=mad(rA[0][2],rB[0][4],rC[2][4]); \\n\
            rC[3][4]=mad(rA[0][3],rB[0][4],rC[3][4]); \\n\
            rC[4][4]=mad(rA[0][4],rB[0][4],rC[4][4]); \\n\
            rC[5][4]=mad(rA[0][5],rB[0][4],rC[5][4]); \\n\
            rC[6][4]=mad(rA[0][6],rB[0][4],rC[6][4]); \\n\
            rC[7][4]=mad(rA[0][7],rB[0][4],rC[7][4]); \            \n\
            rC[0][5]=mad(rA[0][0],rB[0][5],rC[0][5]); \\n\
            rC[1][5]=mad(rA[0][1],rB[0][5],rC[1][5]); \\n\
            rC[2][5]=mad(rA[0][2],rB[0][5],rC[2][5]); \\n\
            rC[3][5]=mad(rA[0][3],rB[0][5],rC[3][5]); \\n\
            rC[4][5]=mad(rA[0][4],rB[0][5],rC[4][5]); \\n\
            rC[5][5]=mad(rA[0][5],rB[0][5],rC[5][5]); \    \n\
            rC[6][5]=mad(rA[0][6],rB[0][5],rC[6][5]); \    \n\
            rC[7][5]=mad(rA[0][7],rB[0][5],rC[7][5]); \                \n\
            rC[0][6]=mad(rA[0][0],rB[0][6],rC[0][6]); \\n\
            rC[1][6]=mad(rA[0][1],rB[0][6],rC[1][6]); \\n\
            rC[2][6]=mad(rA[0][2],rB[0][6],rC[2][6]); \\n\
            rC[3][6]=mad(rA[0][3],rB[0][6],rC[3][6]); \\n\
            rC[4][6]=mad(rA[0][4],rB[0][6],rC[4][6]); \\n\
            rC[5][6]=mad(rA[0][5],rB[0][6],rC[5][6]); \    \n\
            rC[6][6]=mad(rA[0][6],rB[0][6],rC[6][6]); \    \n\
            rC[7][6]=mad(rA[0][7],rB[0][6],rC[7][6]); \                \n\
            rC[0][7]=mad(rA[0][0],rB[0][7],rC[0][7]); \\n\
            rC[1][7]=mad(rA[0][1],rB[0][7],rC[1][7]); \\n\
            rC[2][7]=mad(rA[0][2],rB[0][7],rC[2][7]); \\n\
            rC[3][7]=mad(rA[0][3],rB[0][7],rC[3][7]); \\n\
            rC[4][7]=mad(rA[0][4],rB[0][7],rC[4][7]); \\n\
            rC[5][7]=mad(rA[0][5],rB[0][7],rC[5][7]); \    \n\
            rC[6][7]=mad(rA[0][6],rB[0][7],rC[6][7]); \    \n\
            rC[7][7]=mad(rA[0][7],rB[0][7],rC[7][7]); \                \n\
            mem_fence(CLK_LOCAL_MEM_FENCE);\n\
            \n\
__attribute__((reqd_work_group_size(16,16,1)))\n\
__kernel void sgemm_NT_128_128_16_16x16_8x8__ALPHABETA( __global float const * restrict A,\n\
  __global float const * restrict B,\n\
  __global float * C,\n\
  uint const M,\n\
  uint const N,\n\
  uint const K,\n\
  float const alpha,\n\
  float const beta,\n\
  uint lda,\n\
  uint ldb,\n\
  uint ldc,\n\
  uint offsetA,\n\
  uint offsetB,\n\
"
"\
  uint offsetC)\n\
 {\n\
     float rC[8][8]  = {(float)0};\n\
    float rA[1][8];\n\
    float rB[1][8];\n\
    \n\
//    GPtr uA, uB;\n\
//    uA.floatv = (__global float *)A;\n\
//    uB.floatv = (__global float *)B;\n\
    \n\
    A += offsetA;\n\
    B += offsetB;\n\
    C+=offsetC;\n\
    \n\
    __local float lA[2064];\n\
    __local float lB[2064];\n\
    \n\
    uint gidx = get_group_id(0);\n\
    uint gidy = get_group_id(1);\n\
    uint idx = get_local_id(0);\n\
    uint idy = get_local_id(1);\n\
    \n\
    uint idt = 16*idy + idx;\n\
    uint idxT = idt % 16;\n\
    uint idyT = idt / 16;\n\
    \n\
    A +=  gidx*128+ idxT + idyT*lda;\n\
    B +=  gidy*128+ idxT + idyT*ldb;\n\
    \n\
   \n\
    uint block_k = K >> 4;\n\
    do \n\
    {\n\
   // for(unsigned int block_k=0 ; block_k< K ; block_k+=16)\n\
    //{\n\
        __local float* plA = lA + idyT*129+idxT;\n\
        __local float* plB = lB + idyT*129+idxT;\n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
        plB[0] = B[0+0*ldb];\n\
        plB[16] = B[16+0*ldb];\n\
        plB[32] = B[32+0*ldb];\n\
        plB[48] = B[48+0*ldb];\n\
        plB[64] = B[64+0*ldb];\n\
        plB[80] = B[80+0*ldb];\n\
        plB[96] = B[96+0*ldb];\n\
        plB[112] = B[112+0*ldb];\n\
       \n\
        plA[0] = A[0+0*lda];\n\
        plA[16] = A[16+0*lda];\n\
        plA[32] = A[32+0*lda];\n\
"
"\
        plA[48] = A[48+0*lda];\n\
        plA[64] = A[64+0*lda];\n\
        plA[80] = A[80+0*lda];\n\
        plA[96] = A[96+0*lda];\n\
        plA[112] = A[112+0*lda];\n\
        \n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
        uint offA = idx;\n\
        uint offB = idy;\n\
\n\
//        #pragma unroll 1\n\
//        for(unsigned int k = 0 ; k < 16; k+=1){\n\
//        }\n\
\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
        M8x8\n\
\n\
        A += lda<<4;\n\
        B += ldb<<4;\n\
    //}\n\
    } while (--block_k > 0);\n\
\n\
    C+= gidx*128+idx;\n\
    C+= gidy*128*ldc;\n\
    C+= idy*ldc;\n\
    \n\
    C[0*ldc] = alpha*rC[0][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[0][1] + beta*C[16*ldc];\n\
    C[32*ldc] = alpha*rC[0][2] + beta*C[32*ldc];\n\
    C[48*ldc] = alpha*rC[0][3] + beta*C[48*ldc];\n\
    C[64*ldc] = alpha*rC[0][4] + beta*C[64*ldc];\n\
    C[80*ldc] = alpha*rC[0][5] + beta*C[80*ldc];\n\
    C[96*ldc] = alpha*rC[0][6] + beta*C[96*ldc];\n\
    C[112*ldc] = alpha*rC[0][7] + beta*C[112*ldc];\n\
    C+=16;\n\
    C[0*ldc] = alpha*rC[1][0] + beta*C[0*ldc];\n\
"
"\
    C[16*ldc] = alpha*rC[1][1] + beta*C[16*ldc];\n\
    C[32*ldc] = alpha*rC[1][2] + beta*C[32*ldc];\n\
    C[48*ldc] = alpha*rC[1][3] + beta*C[48*ldc];\n\
    C[64*ldc] = alpha*rC[1][4] + beta*C[64*ldc];\n\
    C[80*ldc] = alpha*rC[1][5] + beta*C[80*ldc];\n\
    C[96*ldc] = alpha*rC[1][6] + beta*C[96*ldc];\n\
    C[112*ldc] = alpha*rC[1][7] + beta*C[112*ldc];\n\
    C+=16;\n\
    C[0*ldc] = alpha*rC[2][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[2][1] + beta*C[16*ldc];\n\
    C[32*ldc] = alpha*rC[2][2] + beta*C[32*ldc];\n\
    C[48*ldc] = alpha*rC[2][3] + beta*C[48*ldc];\n\
    C[64*ldc] = alpha*rC[2][4] + beta*C[64*ldc];\n\
    C[80*ldc] = alpha*rC[2][5] + beta*C[80*ldc];\n\
    C[96*ldc] = alpha*rC[2][6] + beta*C[96*ldc];\n\
    C[112*ldc] = alpha*rC[2][7] + beta*C[112*ldc];\n\
    C+=16;\n\
    C[0*ldc] = alpha*rC[3][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[3][1] + beta*C[16*ldc];\n\
    C[32*ldc] = alpha*rC[3][2] + beta*C[32*ldc];\n\
    C[48*ldc] = alpha*rC[3][3] + beta*C[48*ldc];\n\
    C[64*ldc] = alpha*rC[3][4] + beta*C[64*ldc];\n\
    C[80*ldc] = alpha*rC[3][5] + beta*C[80*ldc];\n\
    C[96*ldc] = alpha*rC[3][6] + beta*C[96*ldc];\n\
    C[112*ldc] = alpha*rC[3][7] + beta*C[112*ldc];\n\
    C+=16;\n\
    C[0*ldc] = alpha*rC[4][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[4][1] + beta*C[16*ldc];\n\
    C[32*ldc] = alpha*rC[4][2] + beta*C[32*ldc];\n\
    C[48*ldc] = alpha*rC[4][3] + beta*C[48*ldc];\n\
    C[64*ldc] = alpha*rC[4][4] + beta*C[64*ldc];\n\
    C[80*ldc] = alpha*rC[4][5] + beta*C[80*ldc];\n\
    C[96*ldc] = alpha*rC[4][6] + beta*C[96*ldc];\n\
    C[112*ldc] = alpha*rC[4][7] + beta*C[112*ldc];\n\
    C+=16;\n\
    C[0*ldc] = alpha*rC[5][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[5][1] + beta*C[16*ldc];\n\
    C[32*ldc] = alpha*rC[5][2] + beta*C[32*ldc];\n\
    C[48*ldc] = alpha*rC[5][3] + beta*C[48*ldc];\n\
    C[64*ldc] = alpha*rC[5][4] + beta*C[64*ldc];\n\
    C[80*ldc] = alpha*rC[5][5] + beta*C[80*ldc];\n\
    C[96*ldc] = alpha*rC[5][6] + beta*C[96*ldc];\n\
    C[112*ldc] = alpha*rC[5][7] + beta*C[112*ldc];\n\
    C+=16;\n\
    C[0*ldc] = alpha*rC[6][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[6][1] + beta*C[16*ldc];\n\
    C[32*ldc] = alpha*rC[6][2] + beta*C[32*ldc];\n\
    C[48*ldc] = alpha*rC[6][3] + beta*C[48*ldc];\n\
    C[64*ldc] = alpha*rC[6][4] + beta*C[64*ldc];\n\
    C[80*ldc] = alpha*rC[6][5] + beta*C[80*ldc];\n\
"
"\
    C[96*ldc] = alpha*rC[6][6] + beta*C[96*ldc];\n\
    C[112*ldc] = alpha*rC[6][7] + beta*C[112*ldc];\n\
    C+=16;\n\
    C[0*ldc] = alpha*rC[7][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[7][1] + beta*C[16*ldc];\n\
    C[32*ldc] = alpha*rC[7][2] + beta*C[32*ldc];\n\
    C[48*ldc] = alpha*rC[7][3] + beta*C[48*ldc];\n\
    C[64*ldc] = alpha*rC[7][4] + beta*C[64*ldc];\n\
    C[80*ldc] = alpha*rC[7][5] + beta*C[80*ldc];\n\
    C[96*ldc] = alpha*rC[7][6] + beta*C[96*ldc];\n\
    C[112*ldc] = alpha*rC[7][7] + beta*C[112*ldc];\n\
 }\n\
            \n\
";


