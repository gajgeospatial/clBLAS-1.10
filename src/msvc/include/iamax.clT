/* ************************************************************************
 * Copyright 2013 Advanced Micro Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ************************************************************************/

static const char *iamax_kernel = "\
#pragma OPENCL EXTENSION cl_amd_printf:enable\n\
#ifdef DOUBLE_PRECISION\n\
    #ifdef cl_khr_fp64\n\
    #pragma OPENCL EXTENSION cl_khr_fp64 : enable\n\
    #else\n\
    #pragma OPENCL EXTENSION cl_amd_fp64 : enable\n\
    #endif\n\
    #define MIN 0x1.0p-1022         // Min in case of d/z (values from khronos site)\n\
#else\n\
    #define MIN 0x1.0p-126f         // Min in case od s/c\n\
#endif\n\
/******************************************************\n\
 *  Implementations available for REDUCTION_BY_MAX\n\
     0 - ATOMIC_FLI\n\
     1 - REG_FLI,\n\
     2 - ATOMIC_FHI,\n\
     3 - REG_FHI\n\
\n\
    Implementation available for REDUCE_MAX\n\
    0 - FHI\n\
    1 - FLI\n\
 ***************************************************/\n\
\n\
__kernel void i%PREFIXamax_kernel( __global %TYPE *_X, __global %PTYPE *_scratchBuf,\n\
                                        uint N, uint offx, int incx)\n\
{\n\
    __global %TYPE *X = _X + offx;\n\
    __global %PTYPE *scratchBufVal = _scratchBuf;\n\
    int numGrps = get_num_groups(0);\n\
    __global uint *scratchBufIndex = (__global uint*)(&_scratchBuf[numGrps]);\n\
\n\
    #ifdef RETURN_ON_INVALID\n\
        // Incase of incx<1, index will be zero\n\
        if( get_global_id(0) == 0 ) {\n\
            scratchBufVal[0] = (%PTYPE)0.0;\n\
            scratchBufIndex[0] = 0;\n\
        }\n\
        return;\n\
    #endif\n\
\n\
    %PTYPE maxVal = MIN, val = MIN;\n\
    uint index = 0, maxIndex = 0;\n\
    %TYPE%V vReg1;\n\
    %PTYPE%V pReg1;\n\
\n\
    int gOffset;\n\
    for( gOffset=(get_global_id(0) * %V); (gOffset + %V - 1)<N; gOffset+=( get_global_size(0) * %V ) )\n\
    {\n\
        #ifdef INCX_NONUNITY\n\
"
"\
            %VLOADWITHINCX( vReg1, (X + (gOffset*incx)), incx);\n\
        #else\n\
            vReg1 = %VLOAD( 0, (X + (gOffset * incx)) );\n\
        #endif\n\
\n\
        pReg1 = %VABS(vReg1);\n\
\n\
        %REDUCE_MAX(pReg1,val,index,1); // Find max within a vector\n\
\n\
        if(val > maxVal)\n\
        {\n\
            maxVal = val;\n\
            maxIndex = (gOffset + index);\n\
        }\n\
    }\n\
\n\
    // Loop for the last thread to handle the tail part of the vector\n\
    // Using the same gOffset used above\n\
    for( ; gOffset<N; gOffset++ )\n\
    {\n\
        %TYPE sReg1;\n\
        sReg1 = X[gOffset * incx];\n\
        if(%VABS(sReg1) > maxVal)\n\
        {\n\
            maxVal = %VABS(sReg1);\n\
            maxIndex = gOffset;\n\
        }\n\
    }\n\
\n\
    // Note: this has to be called outside any if-conditions- because REDUCTION uses barrier\n\
#ifdef REDUCE_MAX_WITH_INDEX_ATOMICS\n\
    %REDUCTION_BY_MAX(maxVal,maxIndex,0);\n\
#else\n\
    %REDUCTION_BY_MAX(maxVal,maxIndex,1);\n\
#endif\n\
\n\
    if(get_local_id(0) == 0)\n\
    {\n\
        scratchBufVal[get_group_id(0)] = maxVal;\n\
        scratchBufIndex[get_group_id(0)] = maxIndex + 1; // because 0 is reserved for error\n\
    }\n\
}";



