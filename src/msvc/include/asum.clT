/* ************************************************************************
 * Copyright 2013 Advanced Micro Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ************************************************************************/

static const char *asum_kernel = "\
#ifdef DOUBLE_PRECISION\n\
    #ifdef cl_khr_fp64\n\
    #pragma OPENCL EXTENSION cl_khr_fp64 : enable\n\
    #else\n\
    #pragma OPENCL EXTENSION cl_amd_fp64 : enable\n\
    #endif\n\
#endif\n\
\n\
__kernel void %PREFIXasum_kernel( __global %TYPE *_X, __global %PTYPE *scratchBuff, uint N, uint offx, int incx)\n\
{\n\
    __global %TYPE *X = _X + offx;\n\
    %TYPE asum = (%TYPE) 0.0;\n\
\n\
    #ifdef INCX_NEGATIVE\n\
        if( get_global_id(0) == 0 ) {\n\
            scratchBuff[0] = (%PTYPE)0.0;\n\
        }\n\
        return;\n\
    #endif\n\
\n\
\n\
    int gOffset;\n\
    for( gOffset=(get_global_id(0) * %V); (gOffset + %V - 1)<N; gOffset+=( get_global_size(0) * %V ) )\n\
    {\n\
        %TYPE%V vReg1;\n\
\n\
        #ifdef INCX_NONUNITY\n\
            %VLOADWITHINCX( vReg1, (X + (gOffset*incx)), incx);\n\
        #else\n\
            vReg1 = %VLOAD( 0, (X + gOffset) );\n\
        #endif\n\
        vReg1 = fabs( vReg1 );\n\
\n\
        asum += %REDUCE_SUM( vReg1 );          // Add-up elements in the vector to give a scalar\n\
    }\n\
\n\
    for( ; gOffset<N; gOffset++ )\n\
    {\n\
        %TYPE sReg1 = X[gOffset * incx];\n\
        sReg1 = fabs( sReg1 );\n\
        //%TYPE res;\n\
        %ADD( asum, asum, sReg1 );\n\
    }\n\
\n\
    %REDUCTION_BY_SUM(asum);\n\
\n\
    %PTYPE answer;\n\
\n\
    #ifdef COMPLEX\n\
"
"\
        answer = asum.even + asum.odd;\n\
    #else\n\
        answer = asum;\n\
    #endif\n\
\n\
\n\
    if( (get_local_id(0)) == 0 ) {\n\
        scratchBuff[ get_group_id(0) ] = answer;\n\
    }\n\
}\n\
\n";




