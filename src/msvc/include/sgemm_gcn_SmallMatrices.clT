static const char * sgemm_NT_32_32_16_16x16_2x2__ALPHABETA = "\
\n\
#define  M2x2 \\n\
            rA[0][0] = lA[offA + 0];                  \\n\
            rA[0][1] = lA[offA + 16];                  \\n\
            rB[0][0] = lB[offB + 0];                  \\n\
            rB[0][1] = lB[offB + 16];                  \\n\
            offA += 33;                                  \\n\
            offB += 33;                                  \\n\
            rC[0][0]=mad(rA[0][0],rB[0][0],rC[0][0]); \\n\
            rC[1][0]=mad(rA[0][1],rB[0][0],rC[1][0]); \\n\
            rC[0][1]=mad(rA[0][0],rB[0][1],rC[0][1]); \\n\
            rC[1][1]=mad(rA[0][1],rB[0][1],rC[1][1]); \\n\
            barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
__attribute__((reqd_work_group_size(16,16,1)))\n\
\n\
__kernel void sgemm_NT_32_32_16_16x16_2x2__ALPHABETA( __global float const * restrict A,\n\
  __global float const * restrict B,\n\
  __global float * C,\n\
  uint const M,\n\
  uint const N,\n\
  uint const K,\n\
  float const alpha,\n\
  float const beta,\n\
  uint lda,\n\
  uint ldb,\n\
  uint ldc,\n\
  uint offsetA,\n\
  uint offsetB,\n\
  uint offsetC)\n\
{\n\
    float rC[2][2]  = {(float)0};\n\
    float rA[1][2];\n\
    float rB[1][2];\n\
    \n\
    A += offsetA;\n\
    B += offsetB;\n\
    C+=offsetC;\n\
    \n\
    __local float lA[544];\n\
    __local float lB[544];\n\
    \n\
    uint gidx = get_group_id(0);\n\
    uint gidy = get_group_id(1);\n\
    uint idx = get_local_id(0);\n\
    uint idy = get_local_id(1);\n\
    \n\
    uint idt = 16*idy + idx;\n\
    uint idxT = idt % 16;\n\
"
"\
    uint idyT = idt / 16;\n\
    \n\
    A +=  gidx*32+ idxT + idyT*lda;\n\
    B +=  gidy*32+ idxT + idyT*ldb;\n\
    \n\
   \n\
    uint block_k = K >> 4;\n\
    do \n\
    {\n\
        __local float* plA = lA + idyT*33+idxT;\n\
        __local float* plB = lB + idyT*33+idxT;\n\
        plB[0] = B[0+0*ldb];\n\
        plB[16] = B[16+0*ldb];\n\
               \n\
        plA[0] = A[0+0*lda];\n\
        plA[16] = A[16+0*lda];\n\
               \n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
        uint offA = idx;\n\
        uint offB = idy;\n\
\n\
\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
\n\
        A += lda<<4;\n\
        B += ldb<<4;\n\
    //}\n\
    } while (--block_k > 0);\n\
\n\
    C+= gidx*32+idx;\n\
    C+= gidy*32*ldc;\n\
    C+= idy*ldc;\n\
    \n\
    C[0*ldc] = alpha*rC[0][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[0][1] + beta*C[16*ldc];\n\
"
"\
    C+=16;\n\
    C[0*ldc] = alpha*rC[1][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[1][1] + beta*C[16*ldc];\n\
    \n\
}\n\
\n\
";





static const char * sgemm_NT_32_32_16_16x16_2x2__ALPHA = "\
\n\
\n\
#define  M2x2 \\n\
            rA[0][0] = lA[offA + 0];                  \\n\
            rA[0][1] = lA[offA + 16];                  \\n\
            rB[0][0] = lB[offB + 0];                  \\n\
            rB[0][1] = lB[offB + 16];                  \\n\
            offA += 33;                                  \\n\
            offB += 33;                                  \\n\
            rC[0][0]=mad(rA[0][0],rB[0][0],rC[0][0]); \\n\
            rC[1][0]=mad(rA[0][1],rB[0][0],rC[1][0]); \\n\
            rC[0][1]=mad(rA[0][0],rB[0][1],rC[0][1]); \\n\
            rC[1][1]=mad(rA[0][1],rB[0][1],rC[1][1]); \\n\
            barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
__attribute__((reqd_work_group_size(16,16,1)))\n\
\n\
__kernel void sgemm_NT_32_32_16_16x16_2x2__ALPHA( __global float const * restrict A,\n\
  __global float const * restrict B,\n\
  __global float * C,\n\
  uint const M,\n\
  uint const N,\n\
  uint const K,\n\
  float const alpha,\n\
  uint lda,\n\
  uint ldb,\n\
  uint ldc,\n\
  uint offsetA,\n\
  uint offsetB,\n\
  uint offsetC)\n\
{\n\
    float rC[2][2]  = {(float)0};\n\
    float rA[1][2];\n\
    float rB[1][2];\n\
\n\
    A += offsetA;\n\
    B += offsetB;\n\
    C+=offsetC;\n\
    \n\
    __local float lA[544];\n\
    __local float lB[544];\n\
    \n\
    uint gidx = get_group_id(0);\n\
    uint gidy = get_group_id(1);\n\
    uint idx = get_local_id(0);\n\
    uint idy = get_local_id(1);\n\
    \n\
    uint idt = 16*idy + idx;\n\
    uint idxT = idt % 16;\n\
"
"\
    uint idyT = idt / 16;\n\
    \n\
    A +=  gidx*32+ idxT + idyT*lda;\n\
    B +=  gidy*32+ idxT + idyT*ldb;\n\
    \n\
   \n\
    uint block_k = K >> 4;\n\
    do \n\
    {\n\
   // for(unsigned int block_k=0 ; block_k< K ; block_k+=16)\n\
    //{\n\
        __local float* plA = lA + idyT*33+idxT;\n\
        __local float* plB = lB + idyT*33+idxT;\n\
       // barrier(CLK_LOCAL_MEM_FENCE);\n\
        plB[0] = B[0+0*ldb];\n\
        plB[16] = B[16+0*ldb];\n\
       \n\
        plA[0] = A[0+0*lda];\n\
        plA[16] = A[16+0*lda];\n\
\n\
        \n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
        uint offA = idx;\n\
        uint offB = idy;\n\
\n\
//        #pragma unroll 1\n\
//        for(unsigned int k = 0 ; k < 16; k+=1){\n\
//        }\n\
\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
\n\
        A += lda<<4;\n\
        B += ldb<<4;\n\
    //}\n\
    } while (--block_k > 0);\n\
"
"\
\n\
    C+= gidx*32+idx;\n\
    C+= gidy*32*ldc;\n\
    C+= idy*ldc;\n\
    \n\
    C[0*ldc] = alpha*rC[0][0] ;\n\
    C[16*ldc] = alpha*rC[0][1];\n\
    C+=16;                      \n\
    C[0*ldc] = alpha*rC[1][0] ;\n\
    C[16*ldc] = alpha*rC[1][1];\n\
    \n\
}\n\
\n\
";



static const char * sgemm_NT_32_32_16_16x16_2x2__ALPHABETA_BRANCH = "\
\n\
#define  M2x2 \\n\
            rA[0][0] = lA[offA + 0];                  \\n\
            rA[0][1] = lA[offA + 16];                  \\n\
            rB[0][0] = lB[offB + 0];                  \\n\
            rB[0][1] = lB[offB + 16];                  \\n\
            offA += 33;                                  \\n\
            offB += 33;                                  \\n\
            rC[0][0]=mad(rA[0][0],rB[0][0],rC[0][0]); \\n\
            rC[1][0]=mad(rA[0][1],rB[0][0],rC[1][0]); \\n\
            rC[0][1]=mad(rA[0][0],rB[0][1],rC[0][1]); \\n\
            rC[1][1]=mad(rA[0][1],rB[0][1],rC[1][1]); \\n\
            mem_fence(CLK_LOCAL_MEM_FENCE);\n\
\n\
__attribute__((reqd_work_group_size(16,16,1)))\n\
\n\
__kernel void sgemm_NT_32_32_16_16x16_2x2__ALPHABETA_BRANCH( __global float const * restrict A,\n\
  __global float const * restrict B,\n\
  __global float * C,\n\
  uint const M,\n\
  uint const N,\n\
  uint const K,\n\
  float const alpha,\n\
  float const beta,\n\
  uint lda,\n\
  uint ldb,\n\
  uint ldc,\n\
  uint offsetA,\n\
  uint offsetB,\n\
  uint offsetC)\n\
{\n\
    float rC[2][2]  = {(float)0};\n\
    float rA[1][2];\n\
    float rB[1][2];\n\
    \n\
    \n\
    A += offsetA;\n\
    B += offsetB;\n\
    C+=offsetC;\n\
    \n\
    __local float lA[528];//16*32+16\n\
    __local float lB[528];\n\
    \n\
    uint gidx = get_group_id(0);\n\
    uint gidy = get_group_id(1);\n\
    uint idx = get_local_id(0);\n\
    uint idy = get_local_id(1);\n\
    \n\
    int CurrentOffSetA = gidx*32+ idx;\n\
"
"\
    int CurrentOffSetB = gidy*32+ idx;\n\
    \n\
    A +=  gidx*32+ idx + idy*lda;\n\
    B +=  gidy*32+ idx + idy*ldb;\n\
    \n\
   \n\
    uint block_k = K >> 4;\n\
    do \n\
    {\n\
        __local float* plA = lA + idy*33+idx;\n\
        __local float* plB = lB + idy*33+idx;\n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
        \n\
        plB[0]  = CurrentOffSetB>=N?0.0:B[0];\n\
        plB[16] = CurrentOffSetB+16>=N?0.0:B[16];\n\
       \n\
        plA[0]  = CurrentOffSetA>=M?0.0:A[0];\n\
        plA[16] = CurrentOffSetA+16>=M?0.0:A[16];\n\
\n\
        \n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
        uint offA = idx;\n\
        uint offB = idy;\n\
\n\
\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
\n\
        A += lda<<4;\n\
        B += ldb<<4;\n\
    } while (--block_k > 0);\n\
\n\
\n\
    int offset_x = gidx*32+idx;\n\
    int offset_y = gidy*32+ idy;\n\
\n\
"
"\
    if(offset_x>=M || offset_y>=N )\n\
      return;\n\
\n\
    C+=offset_x+offset_y*ldc;\n\
    \n\
    int i = 0;\n\
    do \n\
    {\n\
      C[0     ] = mad(alpha, rC[i][0], beta*C[0]);\n\
      if(offset_y+16<N)\n\
        C[16*ldc] = mad(alpha, rC[i][1], beta*C[16*ldc]);\n\
      \n\
      C+=16;\n\
      offset_x+=16;\n\
      if(offset_x>=M )\n\
        return;\n\
\n\
        \n\
    }\n\
    while (++i < 2);\n\
    \n\
}\n\
\n\
";




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static const char * sgemm_NN_32_32_16_16x16_2x2__ALPHABETA = "\
\n\
#define  M2x2 \\n\
            rA[0][0] = lA[offA + 0];                  \\n\
            rA[0][1] = lA[offA + 16];                  \\n\
            rB[0][0] = lB[offB + 0];                  \\n\
            rB[0][1] = lB[offB + 16];                  \\n\
            offA += 33;                                  \\n\
            offB += 33;                                  \\n\
            rC[0][0]=mad(rA[0][0],rB[0][0],rC[0][0]); \\n\
            rC[1][0]=mad(rA[0][1],rB[0][0],rC[1][0]); \\n\
            rC[0][1]=mad(rA[0][0],rB[0][1],rC[0][1]); \\n\
            rC[1][1]=mad(rA[0][1],rB[0][1],rC[1][1]); \\n\
            barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
__attribute__((reqd_work_group_size(16,16,1)))\n\
\n\
__kernel void sgemm_NN_32_32_16_16x16_2x2__ALPHABETA( __global float const * restrict A,\n\
  __global float const * restrict B,\n\
  __global float * C,\n\
  uint const M,\n\
  uint const N,\n\
  uint const K,\n\
  float const alpha,\n\
  float const beta,\n\
  uint lda,\n\
  uint ldb,\n\
  uint ldc,\n\
  uint offsetA,\n\
  uint offsetB,\n\
  uint offsetC)\n\
{\n\
    float rC[2][2]  = {(float)0};\n\
    float rA[1][2];\n\
    float rB[1][2];\n\
    \n\
    A += offsetA;\n\
    B += offsetB;\n\
    C+=offsetC;\n\
    \n\
    __local float lA[544];\n\
    __local float lB[544];\n\
    \n\
    uint gidx = get_group_id(0);\n\
    uint gidy = get_group_id(1);\n\
    uint idx = get_local_id(0);\n\
    uint idy = get_local_id(1);\n\
    \n\
    uint idt = 16*idy + idx;\n\
    uint idxT = idt % 16;\n\
"
"\
    uint idyT = idt / 16;\n\
    \n\
    A +=  gidx*32+ idxT + idyT*lda;\n\
    B +=  (gidy*32+idyT)*ldb + idxT;\n\
    \n\
   \n\
    uint block_k = K >> 4;\n\
    do \n\
      {\n\
\n\
      __local float* plA = lA + idyT*33+idxT;\n\
      __local float* plB = lB + idxT*33+idyT;\n\
      plB[0] = B[0];\n\
      plB[16] = B[16*ldb];\n\
       \n\
        plA[0] = A[0+0*lda];\n\
      plA[16] = A[16+0*lda];\n\
              \n\
      barrier(CLK_LOCAL_MEM_FENCE);\n\
      uint offA = idx;\n\
      uint offB = idy;\n\
\n\
\n\
      M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
\n\
      A += lda<<4;\n\
      B += 16;\n\
      } while (--block_k > 0);\n\
\n\
    C+= gidx*32+idx;\n\
    C+= gidy*32*ldc;\n\
    C+= idy*ldc;\n\
    \n\
      C[0*ldc] = alpha*rC[0][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[0][1] + beta*C[16*ldc];\n\
"
"\
    C+=16;\n\
    C[0*ldc] = alpha*rC[1][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[1][1] + beta*C[16*ldc];\n\
}\n\
\n\
";





static const char * sgemm_NN_32_32_16_16x16_2x2__ALPHA = "\
\n\
#define  M2x2 \\n\
            rA[0][0] = lA[offA + 0];                  \\n\
            rA[0][1] = lA[offA + 16];                  \\n\
            rB[0][0] = lB[offB + 0];                  \\n\
            rB[0][1] = lB[offB + 16];                  \\n\
            offA += 33;                                  \\n\
            offB += 33;                                  \\n\
            rC[0][0]=mad(rA[0][0],rB[0][0],rC[0][0]); \\n\
            rC[1][0]=mad(rA[0][1],rB[0][0],rC[1][0]); \\n\
            rC[0][1]=mad(rA[0][0],rB[0][1],rC[0][1]); \\n\
            rC[1][1]=mad(rA[0][1],rB[0][1],rC[1][1]); \\n\
            barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
__attribute__((reqd_work_group_size(16,16,1)))\n\
\n\
__kernel void sgemm_NN_32_32_16_16x16_2x2__ALPHA( __global float const * restrict A,\n\
  __global float const * restrict B,\n\
  __global float * C,\n\
  uint const M,\n\
  uint const N,\n\
  uint const K,\n\
  float const alpha,\n\
  uint lda,\n\
  uint ldb,\n\
  uint ldc,\n\
  uint offsetA,\n\
  uint offsetB,\n\
  uint offsetC)\n\
{\n\
    float rC[2][2]  = {(float)0};\n\
    float rA[1][2];\n\
    float rB[1][2];\n\
    \n\
    \n\
    A += offsetA;\n\
    B += offsetB;\n\
    C+=offsetC;\n\
    \n\
    __local float lA[544];\n\
    __local float lB[544];\n\
    \n\
    uint gidx = get_group_id(0);\n\
    uint gidy = get_group_id(1);\n\
    uint idx = get_local_id(0);\n\
    uint idy = get_local_id(1);\n\
    \n\
    uint idt = 16*idy + idx;\n\
    uint idxT = idt % 16;\n\
"
"\
    uint idyT = idt / 16;\n\
    \n\
    A +=  gidx*32+ idxT + idyT*lda;\n\
    B +=  (gidy*32+idyT)*ldb + idxT;\n\
    \n\
   \n\
  uint block_k = K >> 4;\n\
  do \n\
    {\n\
    __local float* plA = lA + idyT*33+idxT;\n\
    __local float* plB = lB + idxT*33+idyT;\n\
    plB[0] = B[0];\n\
    plB[16] = B[16*ldb];\n\
        \n\
      plA[0] = A[0+0*lda];\n\
    plA[16] = A[16+0*lda];\n\
       \n\
        \n\
    barrier(CLK_LOCAL_MEM_FENCE);\n\
    uint offA = idx;\n\
    uint offB = idy;\n\
\n\
\n\
    M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
\n\
    A += lda<<4;\n\
    B += 16;\n\
   \n\
    } while (--block_k > 0);\n\
\n\
    C+= gidx*32+idx;\n\
    C+= gidy*32*ldc;\n\
    C+= idy*ldc;\n\
    \n\
      C[0*ldc] = alpha*rC[0][0] ;\n\
"
"\
    C[16*ldc] = alpha*rC[0][1];\n\
    C+=16;                      \n\
    C[0*ldc] = alpha*rC[1][0] ;\n\
    C[16*ldc] = alpha*rC[1][1]; \n\
}\n\
\n\
";



static const char * sgemm_NN_32_32_16_16x16_2x2__ALPHABETA_BRANCH = "\
\n\
#define  M2x2 \\n\
            rA[0][0] = lA[offA + 0];                  \\n\
            rA[0][1] = lA[offA + 16];                  \\n\
            rB[0][0] = lB[offB + 0];                  \\n\
            rB[0][1] = lB[offB + 16];                  \\n\
            offA += 33;                                  \\n\
            offB += 33;                                  \\n\
            rC[0][0]=mad(rA[0][0],rB[0][0],rC[0][0]); \\n\
            rC[1][0]=mad(rA[0][1],rB[0][0],rC[1][0]); \\n\
            rC[0][1]=mad(rA[0][0],rB[0][1],rC[0][1]); \\n\
            rC[1][1]=mad(rA[0][1],rB[0][1],rC[1][1]); \\n\
            mem_fence(CLK_LOCAL_MEM_FENCE);\n\
\n\
__attribute__((reqd_work_group_size(16,16,1)))\n\
\n\
__kernel void sgemm_NN_32_32_16_16x16_2x2__ALPHABETA_BRANCH( __global float const * restrict A,\n\
  __global float const * restrict B,\n\
  __global float * C,\n\
  uint const M,\n\
  uint const N,\n\
  uint const K,\n\
  float const alpha,\n\
  float const beta,\n\
  uint lda,\n\
  uint ldb,\n\
  uint ldc,\n\
  uint offsetA,\n\
  uint offsetB,\n\
  uint offsetC)\n\
{\n\
    float rC[2][2]  = {(float)0};\n\
    float rA[1][2];\n\
    float rB[1][2];\n\
    \n\
\n\
    \n\
    A += offsetA;\n\
    B += offsetB;\n\
    C+=offsetC;\n\
    \n\
    __local float lA[528];//16*32+16\n\
    __local float lB[528];\n\
    \n\
    uint gidx = get_group_id(0);\n\
    uint gidy = get_group_id(1);\n\
    uint idx = get_local_id(0);\n\
    uint idy = get_local_id(1);\n\
    \n\
"
"\
    int CurrentOffSetA = gidx*32+ idx;\n\
    int CurrentOffSetB = gidy*32+ idy;\n\
\n\
    A +=  gidx*32+ idx + idy*lda;\n\
    B +=  gidy*32*ldb+ idx + idy*ldb;\n\
    \n\
   \n\
    uint block_k = K >> 4;\n\
    do \n\
    {\n\
        __local float* plA = lA + idy*33+idx;\n\
        __local float* plB = lB + idx*33+idy;\n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
        \n\
        plB[0]  = CurrentOffSetB>=N?0.0:B[0];\n\
        plB[16] = CurrentOffSetB+16>=N?0.0:B[16*ldb];\n\
       \n\
        plA[0]  = CurrentOffSetA>=M?0.0:A[0];\n\
        plA[16] = CurrentOffSetA+16>=M?0.0:A[16];\n\
\n\
        \n\
        barrier(CLK_LOCAL_MEM_FENCE);\n\
        uint offA = idx;\n\
        uint offB = idy;\n\
        \n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
\n\
        A += lda<<4;\n\
        B += 16;\n\
    //}\n\
    } while (--block_k > 0);\n\
\n\
    int offset_x = gidx*32+idx;\n\
    int offset_y = gidy*32+ idy;\n\
    if(offset_x>=M || offset_y>=N )\n\
"
"\
      return;\n\
    \n\
    C+=offset_x+offset_y*ldc;\n\
    \n\
    \n\
    int i = 0;\n\
    do \n\
    {\n\
      C[0     ] = mad(alpha, rC[i][0], beta*C[0]);\n\
      if(offset_y+16<N)\n\
        C[16*ldc] = mad(alpha, rC[i][1], beta*C[16*ldc]);\n\
      \n\
      C+=16;\n\
      offset_x+=16;\n\
      if(offset_x>=M )\n\
        return;\n\
\n\
        \n\
    }\n\
    while (++i < 2);\n\
   \n\
}\n\
\n\
";



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static const char * sgemm_TN_32_32_16_16x16_2x2__ALPHABETA = "\
\n\
#define  M2x2 \\n\
            rA[0][0] = lA[offA + 0];                  \\n\
            rA[0][1] = lA[offA + 16];                  \\n\
            rB[0][0] = lB[offB + 0];                  \\n\
            rB[0][1] = lB[offB + 16];                  \\n\
            offA += 33;                                  \\n\
            offB += 33;                                  \\n\
            rC[0][0]=mad(rA[0][0],rB[0][0],rC[0][0]); \\n\
            rC[1][0]=mad(rA[0][1],rB[0][0],rC[1][0]); \\n\
            rC[0][1]=mad(rA[0][0],rB[0][1],rC[0][1]); \\n\
            rC[1][1]=mad(rA[0][1],rB[0][1],rC[1][1]); \\n\
            barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
__attribute__((reqd_work_group_size(16,16,1)))\n\
\n\
__kernel void sgemm_TN_32_32_16_16x16_2x2__ALPHABETA( __global float const * restrict A,\n\
  __global float const * restrict B,\n\
  __global float * C,\n\
  uint const M,\n\
  uint const N,\n\
  uint const K,\n\
  float const alpha,\n\
  float const beta,\n\
  uint lda,\n\
  uint ldb,\n\
  uint ldc,\n\
  uint offsetA,\n\
  uint offsetB,\n\
  uint offsetC)\n\
{\n\
    float rC[2][2]  = {(float)0};\n\
    float rA[1][2];\n\
    float rB[1][2];\n\
    \n\
    A += offsetA;\n\
    B += offsetB;\n\
    C+=offsetC;\n\
    \n\
    __local float lA[544];\n\
    __local float lB[544];\n\
    \n\
    uint gidx = get_group_id(0);\n\
    uint gidy = get_group_id(1);\n\
    uint idx = get_local_id(0);\n\
    uint idy = get_local_id(1);\n\
    \n\
    uint idt = 16*idy + idx;\n\
    uint idxT = idt % 16;\n\
"
"\
    uint idyT = idt / 16;\n\
    \n\
    A += (gidx*32+idyT)*lda+ idxT ;\n\
    B += (gidy*32+idyT)*ldb + idxT;\n\
    \n\
   \n\
    uint block_k = K >> 4;\n\
    do \n\
      {\n\
\n\
      __local float* plA = lA + idxT*33+idyT;\n\
      __local float* plB = lB + idxT*33+idyT;\n\
      plB[0] = B[0];\n\
      plB[16] = B[16*ldb];\n\
       \n\
        plA[0] = A[0];\n\
      plA[16] = A[16*lda];\n\
              \n\
      barrier(CLK_LOCAL_MEM_FENCE);\n\
      uint offA = idx;\n\
      uint offB = idy;\n\
\n\
\n\
      M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
          M2x2\n\
\n\
      A += 16;\n\
      B += 16;\n\
      } while (--block_k > 0);\n\
\n\
    C+= gidx*32+idx;\n\
    C+= gidy*32*ldc;\n\
    C+= idy*ldc;\n\
    \n\
      C[0*ldc] = alpha*rC[0][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[0][1] + beta*C[16*ldc];\n\
"
"\
    C+=16;\n\
    C[0*ldc] = alpha*rC[1][0] + beta*C[0*ldc];\n\
    C[16*ldc] = alpha*rC[1][1] + beta*C[16*ldc];\n\
}\n\
\n\
";





static const char * sgemm_TN_32_32_16_16x16_2x2__ALPHA = "\
\n\
#define  M2x2 \\n\
            rA[0][0] = lA[offA + 0];                  \\n\
            rA[0][1] = lA[offA + 16];                  \\n\
            rB[0][0] = lB[offB + 0];                  \\n\
            rB[0][1] = lB[offB + 16];                  \\n\
            offA += 33;                                  \\n\
            offB += 33;                                  \\n\
            rC[0][0]=mad(rA[0][0],rB[0][0],rC[0][0]); \\n\
            rC[1][0]=mad(rA[0][1],rB[0][0],rC[1][0]); \\n\
            rC[0][1]=mad(rA[0][0],rB[0][1],rC[0][1]); \\n\
            rC[1][1]=mad(rA[0][1],rB[0][1],rC[1][1]); \\n\
            barrier(CLK_LOCAL_MEM_FENCE);\n\
\n\
__attribute__((reqd_work_group_size(16,16,1)))\n\
\n\
__kernel void sgemm_TN_32_32_16_16x16_2x2__ALPHA( __global float const * restrict A,\n\
  __global float const * restrict B,\n\
  __global float * C,\n\
  uint const M,\n\
  uint const N,\n\
  uint const K,\n\
  float const alpha,\n\
  uint lda,\n\
  uint ldb,\n\
  uint ldc,\n\
  uint offsetA,\n\
  uint offsetB,\n\
  uint offsetC)\n\
{\n\
    float rC[2][2]  = {(float)0};\n\
    float rA[1][2];\n\
    float rB[1][2];\n\
    \n\
    \n\
    A += offsetA;\n\
    B += offsetB;\n\
    C+=offsetC;\n\
    \n\
    __local float lA[544];\n\
    __local float lB[544];\n\
    \n\
    uint gidx = get_group_id(0);\n\
    uint gidy = get_group_id(1);\n\
    uint idx = get_local_id(0);\n\
    uint idy = get_local_id(1);\n\
    \n\
    uint idt = 16*idy + idx;\n\
    uint idxT = idt % 16;\n\
"
"\
    uint idyT = idt / 16;\n\
    \n\
    A +=  (gidx*32+idyT)*lda+ idxT ;\n\
    B +=  (gidy*32+idyT)*ldb + idxT;\n\
    \n\
   \n\
  uint block_k = K >> 4;\n\
  do \n\
    {\n\
    __local float* plA = lA + idxT*33+idyT;\n\
    __local float* plB = lB + idxT*33+idyT;\n\
    plB[0] = B[0];\n\
    plB[16] = B[16*ldb];\n\
        \n\
      plA[0] = A[0];\n\
    plA[16] = A[16*lda];\n\
       \n\
        \n\
    barrier(CLK_LOCAL_MEM_FENCE);\n\
    uint offA = idx;\n\
    uint offB = idy;\n\
\n\
\n\
    M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
\n\
    A += 16;\n\
    B += 16;\n\
   \n\
    } while (--block_k > 0);\n\
\n\
    C+= gidx*32+idx;\n\
    C+= gidy*32*ldc;\n\
    C+= idy*ldc;\n\
    \n\
      C[0*ldc] = alpha*rC[0][0] ;\n\
"
"\
    C[16*ldc] = alpha*rC[0][1];\n\
    C+=16;                      \n\
    C[0*ldc] = alpha*rC[1][0] ;\n\
    C[16*ldc] = alpha*rC[1][1]; \n\
}\n\
\n\
";



static const char * sgemm_TN_32_32_16_16x16_2x2__ALPHABETA_BRANCH = "\
\n\
#define  M2x2 \\n\
            rA[0][0] = lA[offA + 0];                  \\n\
            rA[0][1] = lA[offA + 16];                  \\n\
            rB[0][0] = lB[offB + 0];                  \\n\
            rB[0][1] = lB[offB + 16];                  \\n\
            offA += 33;                                  \\n\
            offB += 33;                                  \\n\
            rC[0][0]=mad(rA[0][0],rB[0][0],rC[0][0]); \\n\
            rC[1][0]=mad(rA[0][1],rB[0][0],rC[1][0]); \\n\
            rC[0][1]=mad(rA[0][0],rB[0][1],rC[0][1]); \\n\
            rC[1][1]=mad(rA[0][1],rB[0][1],rC[1][1]); \\n\
            mem_fence(CLK_LOCAL_MEM_FENCE);\n\
\n\
__attribute__((reqd_work_group_size(16,16,1)))\n\
\n\
__kernel void sgemm_TN_32_32_16_16x16_2x2__ALPHABETA_BRANCH( __global float const * restrict A,\n\
  __global float const * restrict B,\n\
  __global float * C,\n\
  uint const M,\n\
  uint const N,\n\
  uint const K,\n\
  float const alpha,\n\
  float const beta,\n\
  uint lda,\n\
  uint ldb,\n\
  uint ldc,\n\
  uint offsetA,\n\
  uint offsetB,\n\
  uint offsetC)\n\
{\n\
    float rC[2][2]  = {(float)0};\n\
    float rA[1][2];\n\
    float rB[1][2];\n\
    \n\
    \n\
    A += offsetA;\n\
    B += offsetB;\n\
    C+=offsetC;\n\
    \n\
    __local float lA[528];//16*32+16\n\
    __local float lB[528];\n\
    \n\
    uint gidx = get_group_id(0);\n\
    uint gidy = get_group_id(1);\n\
    uint idx = get_local_id(0);\n\
    uint idy = get_local_id(1);\n\
    \n\
    int CurrentOffSetA = gidx*32+ idy;\n\
"
"\
    int CurrentOffSetB = gidy*32+ idy;\n\
\n\
    A +=  (gidx*32+idy)*lda + idx;\n\
    B +=  (gidy*32+idy)*ldb + idx;\n\
    \n\
   \n\
    uint block_k = K >> 4;\n\
    do \n\
    {\n\
      __local float* plA = lA + idx*33+idy;\n\
      __local float* plB = lB + idx*33+idy;\n\
      barrier(CLK_LOCAL_MEM_FENCE);\n\
  \n\
      plB[0]  = CurrentOffSetB>=N?0.0:B[0];\n\
      plB[16] = CurrentOffSetB+16>=N?0.0:B[16*ldb];\n\
\n\
      plA[0]  = CurrentOffSetA>=M?0.0:A[0];\n\
      plA[16] = CurrentOffSetA+16>=M?0.0:A[16*lda];\n\
\n\
\n\
      barrier(CLK_LOCAL_MEM_FENCE);\n\
      uint offA = idx;\n\
      uint offB = idy;\n\
\n\
\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
        M2x2\n\
\n\
      A += 16;\n\
      B += 16;\n\
    } while (--block_k > 0);\n\
\n\
\n\
    int offset_x = gidx*32+idx;\n\
    int offset_y = gidy*32+ idy;\n\
\n\
"
"\
    if(offset_x>=M || offset_y>=N )\n\
      return;\n\
\n\
    C+=offset_x+offset_y*ldc;\n\
\n\
    int i = 0;\n\
    do \n\
    {\n\
      C[0     ] = mad(alpha, rC[i][0], beta*C[0]);\n\
      if(offset_y+16<N)\n\
        C[16*ldc] = mad(alpha, rC[i][1], beta*C[16*ldc]);\n\
\n\
      C+=16;\n\
      offset_x+=16;\n\
      if(offset_x>=M )\n\
        return;\n\
\n\
\n\
    }\n\
    while (++i < 2);\n\
}\n\
\n\
";




